# Generated from .\sql.g4 by ANTLR 4.7.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys

def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3h")
        buf.write("\u03ed\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\3\2\3\2\7\2\u008b\n\2\f\2\16\2\u008e\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\4\7\4\u0096\n\4\f\4\16\4\u0099\13\4\3\4\3")
        buf.write("\4\6\4\u009d\n\4\r\4\16\4\u009e\3\4\7\4\u00a2\n\4\f\4")
        buf.write("\16\4\u00a5\13\4\3\4\7\4\u00a8\n\4\f\4\16\4\u00ab\13\4")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u00c3\n\5\3\6\3")
        buf.write("\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write("\3\t\3\t\3\t\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\5\f\u00ef\n\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16")
        buf.write("\5\16\u00f9\n\16\5\16\u00fb\n\16\3\17\3\17\3\17\5\17\u0100")
        buf.write("\n\17\5\17\u0102\n\17\3\20\3\20\3\20\6\20\u0107\n\20\r")
        buf.write("\20\16\20\u0108\3\20\3\20\3\20\3\20\3\20\7\20\u0110\n")
        buf.write("\20\f\20\16\20\u0113\13\20\5\20\u0115\n\20\3\20\3\20\3")
        buf.write("\20\3\20\5\20\u011b\n\20\5\20\u011d\n\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0128\n\21\f\21\16")
        buf.write("\21\u012b\13\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\7\22\u0136\n\22\f\22\16\22\u0139\13\22\3\22\3\22")
        buf.write("\7\22\u013d\n\22\f\22\16\22\u0140\13\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u0146\n\22\3\23\3\23\3\23\3\23\3\23\5\23\u014d")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26")
        buf.write("\3\26\3\26\7\26\u015b\n\26\f\26\16\26\u015e\13\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\7\26\u0165\n\26\f\26\16\26\u0168")
        buf.write("\13\26\5\26\u016a\n\26\3\26\3\26\3\26\3\26\5\26\u0170")
        buf.write("\n\26\5\26\u0172\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\7\27\u017b\n\27\f\27\16\27\u017e\13\27\3\27\3\27\5")
        buf.write("\27\u0182\n\27\3\27\3\27\3\27\3\27\3\27\7\27\u0189\n\27")
        buf.write("\f\27\16\27\u018c\13\27\3\27\3\27\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\7\31\u0198\n\31\f\31\16\31\u019b")
        buf.write("\13\31\5\31\u019d\n\31\3\31\3\31\3\31\3\31\5\31\u01a3")
        buf.write("\n\31\5\31\u01a5\n\31\3\32\3\32\3\32\3\32\7\32\u01ab\n")
        buf.write("\32\f\32\16\32\u01ae\13\32\3\32\3\32\3\32\3\32\3\32\7")
        buf.write("\32\u01b5\n\32\f\32\16\32\u01b8\13\32\5\32\u01ba\n\32")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u01c0\n\32\5\32\u01c2\n\32\3")
        buf.write("\33\3\33\5\33\u01c6\n\33\3\33\3\33\3\33\7\33\u01cb\n\33")
        buf.write("\f\33\16\33\u01ce\13\33\3\33\3\33\3\33\3\33\7\33\u01d4")
        buf.write("\n\33\f\33\16\33\u01d7\13\33\3\33\5\33\u01da\n\33\5\33")
        buf.write("\u01dc\n\33\3\33\3\33\5\33\u01e0\n\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\7\33\u01e7\n\33\f\33\16\33\u01ea\13\33\3\33\3")
        buf.write("\33\5\33\u01ee\n\33\5\33\u01f0\n\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\7\33\u01f7\n\33\f\33\16\33\u01fa\13\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\7\33\u0202\n\33\f\33\16\33\u0205")
        buf.write("\13\33\3\33\3\33\7\33\u0209\n\33\f\33\16\33\u020c\13\33")
        buf.write("\5\33\u020e\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\34\3\34\3\34\7\34\u021b\n\34\f\34\16\34\u021e\13")
        buf.write("\34\3\34\3\34\5\34\u0222\n\34\3\35\3\35\3\35\7\35\u0227")
        buf.write("\n\35\f\35\16\35\u022a\13\35\3\36\6\36\u022d\n\36\r\36")
        buf.write("\16\36\u022e\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u023b\n\36\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\5\37\u0244\n\37\3 \3 \3 \3 \3 \3 \5 \u024c\n \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \5 \u0255\n \3 \3 \3 \7 \u025a\n \f")
        buf.write(" \16 \u025d\13 \3 \5 \u0260\n \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \5 \u026b\n \3 \5 \u026e\n \3 \3 \3 \3 \5 \u0274\n")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \5 \u0290\n \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \5 \u029b\n \3 \3 \3 \3 \3 \5 \u02a2\n \3 \3")
        buf.write(" \3 \3 \3 \3 \5 \u02aa\n \3 \3 \3 \3 \3 \3 \7 \u02b2\n")
        buf.write(" \f \16 \u02b5\13 \5 \u02b7\n \3 \3 \5 \u02bb\n \7 \u02bd")
        buf.write("\n \f \16 \u02c0\13 \3!\3!\3!\3!\3!\3!\7!\u02c8\n!\f!")
        buf.write("\16!\u02cb\13!\3!\3!\5!\u02cf\n!\3\"\3\"\3\"\3\"\3\"\5")
        buf.write("\"\u02d6\n\"\3\"\3\"\3\"\3\"\7\"\u02dc\n\"\f\"\16\"\u02df")
        buf.write("\13\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\7\"\u02ee\n\"\f\"\16\"\u02f1\13\"\3\"\3\"\3\"\5\"")
        buf.write("\u02f6\n\"\3#\3#\5#\u02fa\n#\3$\3$\3$\3$\3$\7$\u0301\n")
        buf.write("$\f$\16$\u0304\13$\3$\3$\5$\u0308\n$\3$\3$\3$\3$\3$\3")
        buf.write("%\3%\3%\3%\3%\3%\3%\5%\u0316\n%\3%\5%\u0319\n%\5%\u031b")
        buf.write("\n%\3&\3&\5&\u031f\n&\3&\5&\u0322\n&\3&\3&\3&\3&\7&\u0328")
        buf.write("\n&\f&\16&\u032b\13&\3&\5&\u032e\n&\3&\3&\5&\u0332\n&")
        buf.write("\3&\5&\u0335\n&\3&\3&\3&\3&\5&\u033b\n&\3&\5&\u033e\n")
        buf.write("&\5&\u0340\n&\3\'\3\'\3\'\3\'\3\'\7\'\u0347\n\'\f\'\16")
        buf.write("\'\u034a\13\'\3(\3(\3(\5(\u034f\n(\3)\3)\5)\u0353\n)\3")
        buf.write("*\3*\5*\u0357\n*\3*\3*\3*\7*\u035c\n*\f*\16*\u035f\13")
        buf.write("*\3*\3*\3*\3*\7*\u0365\n*\f*\16*\u0368\13*\3*\5*\u036b")
        buf.write("\n*\5*\u036d\n*\3*\3*\5*\u0371\n*\3*\3*\3*\3*\3*\7*\u0378")
        buf.write("\n*\f*\16*\u037b\13*\3*\3*\5*\u037f\n*\5*\u0381\n*\3*")
        buf.write("\3*\3*\3*\3*\7*\u0388\n*\f*\16*\u038b\13*\3*\3*\3*\3*")
        buf.write("\3*\3*\7*\u0393\n*\f*\16*\u0396\13*\3*\3*\7*\u039a\n*")
        buf.write("\f*\16*\u039d\13*\5*\u039f\n*\3+\3+\3,\3,\3,\3,\3,\7,")
        buf.write("\u03a8\n,\f,\16,\u03ab\13,\3,\3,\5,\u03af\n,\3-\5-\u03b2")
        buf.write("\n-\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\5\61\u03be\n")
        buf.write("\61\3\62\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66")
        buf.write("\3\67\3\67\38\38\39\39\3:\3:\3;\3;\3<\3<\3=\3=\3>\3>\3")
        buf.write("?\3?\3@\3@\3A\3A\3B\3B\3C\3C\3D\3D\3D\3D\3D\3D\3D\5D\u03eb")
        buf.write("\nD\3D\2\3>E\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\2\16\5\2//<<ZZ\4\2\7\7JJ\4")
        buf.write("\2\t\t\16\17\3\2\n\13\3\2\20\23\3\2\24\27\4\2\37\37,,")
        buf.write("\4\2::AA\5\2HHaacd\4\2\n\fGG\4\2``cc\5\2\33#%CG_\2\u0454")
        buf.write("\2\u008c\3\2\2\2\4\u0091\3\2\2\2\6\u0097\3\2\2\2\b\u00c2")
        buf.write("\3\2\2\2\n\u00c4\3\2\2\2\f\u00c8\3\2\2\2\16\u00cf\3\2")
        buf.write("\2\2\20\u00d3\3\2\2\2\22\u00d6\3\2\2\2\24\u00d9\3\2\2")
        buf.write("\2\26\u00dd\3\2\2\2\30\u00f0\3\2\2\2\32\u00f5\3\2\2\2")
        buf.write("\34\u00fc\3\2\2\2\36\u0103\3\2\2\2 \u011e\3\2\2\2\"\u012e")
        buf.write("\3\2\2\2$\u0147\3\2\2\2&\u014e\3\2\2\2(\u0152\3\2\2\2")
        buf.write("*\u0156\3\2\2\2,\u0173\3\2\2\2.\u018f\3\2\2\2\60\u0191")
        buf.write("\3\2\2\2\62\u01a6\3\2\2\2\64\u020d\3\2\2\2\66\u020f\3")
        buf.write("\2\2\28\u0223\3\2\2\2:\u022c\3\2\2\2<\u023c\3\2\2\2>\u0273")
        buf.write("\3\2\2\2@\u02c1\3\2\2\2B\u02d0\3\2\2\2D\u02f7\3\2\2\2")
        buf.write("F\u02fb\3\2\2\2H\u031a\3\2\2\2J\u033f\3\2\2\2L\u0341\3")
        buf.write("\2\2\2N\u034e\3\2\2\2P\u0352\3\2\2\2R\u039e\3\2\2\2T\u03a0")
        buf.write("\3\2\2\2V\u03a2\3\2\2\2X\u03b1\3\2\2\2Z\u03b5\3\2\2\2")
        buf.write("\\\u03b7\3\2\2\2^\u03b9\3\2\2\2`\u03bd\3\2\2\2b\u03bf")
        buf.write("\3\2\2\2d\u03c1\3\2\2\2f\u03c3\3\2\2\2h\u03c5\3\2\2\2")
        buf.write("j\u03c7\3\2\2\2l\u03c9\3\2\2\2n\u03cb\3\2\2\2p\u03cd\3")
        buf.write("\2\2\2r\u03cf\3\2\2\2t\u03d1\3\2\2\2v\u03d3\3\2\2\2x\u03d5")
        buf.write("\3\2\2\2z\u03d7\3\2\2\2|\u03d9\3\2\2\2~\u03db\3\2\2\2")
        buf.write("\u0080\u03dd\3\2\2\2\u0082\u03df\3\2\2\2\u0084\u03e1\3")
        buf.write("\2\2\2\u0086\u03ea\3\2\2\2\u0088\u008b\5\6\4\2\u0089\u008b")
        buf.write("\5\4\3\2\u008a\u0088\3\2\2\2\u008a\u0089\3\2\2\2\u008b")
        buf.write("\u008e\3\2\2\2\u008c\u008a\3\2\2\2\u008c\u008d\3\2\2\2")
        buf.write("\u008d\u008f\3\2\2\2\u008e\u008c\3\2\2\2\u008f\u0090\7")
        buf.write("\2\2\3\u0090\3\3\2\2\2\u0091\u0092\7h\2\2\u0092\u0093")
        buf.write("\b\3\1\2\u0093\5\3\2\2\2\u0094\u0096\7\3\2\2\u0095\u0094")
        buf.write("\3\2\2\2\u0096\u0099\3\2\2\2\u0097\u0095\3\2\2\2\u0097")
        buf.write("\u0098\3\2\2\2\u0098\u009a\3\2\2\2\u0099\u0097\3\2\2\2")
        buf.write("\u009a\u00a3\5\b\5\2\u009b\u009d\7\3\2\2\u009c\u009b\3")
        buf.write("\2\2\2\u009d\u009e\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f")
        buf.write("\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a2\5\b\5\2\u00a1")
        buf.write("\u009c\3\2\2\2\u00a2\u00a5\3\2\2\2\u00a3\u00a1\3\2\2\2")
        buf.write("\u00a3\u00a4\3\2\2\2\u00a4\u00a9\3\2\2\2\u00a5\u00a3\3")
        buf.write("\2\2\2\u00a6\u00a8\7\3\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab")
        buf.write("\3\2\2\2\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa")
        buf.write("\7\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ac\u00c3\5\n\6\2\u00ad")
        buf.write("\u00c3\5\f\7\2\u00ae\u00c3\5\16\b\2\u00af\u00c3\5\20\t")
        buf.write("\2\u00b0\u00c3\5\22\n\2\u00b1\u00c3\5\24\13\2\u00b2\u00c3")
        buf.write("\5\"\22\2\u00b3\u00c3\5\26\f\2\u00b4\u00c3\5\30\r\2\u00b5")
        buf.write("\u00c3\5\32\16\2\u00b6\u00c3\5\34\17\2\u00b7\u00c3\5\36")
        buf.write("\20\2\u00b8\u00c3\5 \21\2\u00b9\u00c3\5$\23\2\u00ba\u00c3")
        buf.write("\5&\24\2\u00bb\u00c3\5(\25\2\u00bc\u00c3\5*\26\2\u00bd")
        buf.write("\u00c3\5,\27\2\u00be\u00c3\5.\30\2\u00bf\u00c3\5\60\31")
        buf.write("\2\u00c0\u00c3\5\62\32\2\u00c1\u00c3\5\66\34\2\u00c2\u00ac")
        buf.write("\3\2\2\2\u00c2\u00ad\3\2\2\2\u00c2\u00ae\3\2\2\2\u00c2")
        buf.write("\u00af\3\2\2\2\u00c2\u00b0\3\2\2\2\u00c2\u00b1\3\2\2\2")
        buf.write("\u00c2\u00b2\3\2\2\2\u00c2\u00b3\3\2\2\2\u00c2\u00b4\3")
        buf.write("\2\2\2\u00c2\u00b5\3\2\2\2\u00c2\u00b6\3\2\2\2\u00c2\u00b7")
        buf.write("\3\2\2\2\u00c2\u00b8\3\2\2\2\u00c2\u00b9\3\2\2\2\u00c2")
        buf.write("\u00ba\3\2\2\2\u00c2\u00bb\3\2\2\2\u00c2\u00bc\3\2\2\2")
        buf.write("\u00c2\u00bd\3\2\2\2\u00c2\u00be\3\2\2\2\u00c2\u00bf\3")
        buf.write("\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c1\3\2\2\2\u00c3\t")
        buf.write("\3\2\2\2\u00c4\u00c5\7\'\2\2\u00c5\u00c6\7(\2\2\u00c6")
        buf.write("\u00c7\5j\66\2\u00c7\13\3\2\2\2\u00c8\u00c9\7\34\2\2\u00c9")
        buf.write("\u00ca\7(\2\2\u00ca\u00cb\5j\66\2\u00cb\u00cc\7P\2\2\u00cc")
        buf.write("\u00cd\7X\2\2\u00cd\u00ce\5r:\2\u00ce\r\3\2\2\2\u00cf")
        buf.write("\u00d0\7.\2\2\u00d0\u00d1\7(\2\2\u00d1\u00d2\5j\66\2\u00d2")
        buf.write("\17\3\2\2\2\u00d3\u00d4\7T\2\2\u00d4\u00d5\7)\2\2\u00d5")
        buf.write("\21\3\2\2\2\u00d6\u00d7\7T\2\2\u00d7\u00d8\7V\2\2\u00d8")
        buf.write("\23\3\2\2\2\u00d9\u00da\7]\2\2\u00da\u00db\7(\2\2\u00db")
        buf.write("\u00dc\5j\66\2\u00dc\25\3\2\2\2\u00dd\u00de\7\34\2\2\u00de")
        buf.write("\u00df\7U\2\2\u00df\u00ee\5l\67\2\u00e0\u00e1\7P\2\2\u00e1")
        buf.write("\u00e2\7X\2\2\u00e2\u00ef\5p9\2\u00e3\u00e4\7\33\2\2\u00e4")
        buf.write("\u00e5\7#\2\2\u00e5\u00ef\58\35\2\u00e6\u00e7\7\33\2\2")
        buf.write("\u00e7\u00ef\5B\"\2\u00e8\u00e9\7.\2\2\u00e9\u00ea\7#")
        buf.write("\2\2\u00ea\u00ef\5t;\2\u00eb\u00ec\7.\2\2\u00ec\u00ed")
        buf.write("\7&\2\2\u00ed\u00ef\5f\64\2\u00ee\u00e0\3\2\2\2\u00ee")
        buf.write("\u00e3\3\2\2\2\u00ee\u00e6\3\2\2\2\u00ee\u00e8\3\2\2\2")
        buf.write("\u00ee\u00eb\3\2\2\2\u00ef\27\3\2\2\2\u00f0\u00f1\7T\2")
        buf.write("\2\u00f1\u00f2\7$\2\2\u00f2\u00f3\7\63\2\2\u00f3\u00f4")
        buf.write("\5l\67\2\u00f4\31\3\2\2\2\u00f5\u00fa\7 \2\2\u00f6\u00f8")
        buf.write("\7Y\2\2\u00f7\u00f9\5\u0084C\2\u00f8\u00f7\3\2\2\2\u00f8")
        buf.write("\u00f9\3\2\2\2\u00f9\u00fb\3\2\2\2\u00fa\u00f6\3\2\2\2")
        buf.write("\u00fa\u00fb\3\2\2\2\u00fb\33\3\2\2\2\u00fc\u0101\7%\2")
        buf.write("\2\u00fd\u00ff\7Y\2\2\u00fe\u0100\5\u0084C\2\u00ff\u00fe")
        buf.write("\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0102\3\2\2\2\u0101")
        buf.write("\u00fd\3\2\2\2\u0101\u0102\3\2\2\2\u0102\35\3\2\2\2\u0103")
        buf.write("\u0106\5R*\2\u0104\u0105\t\2\2\2\u0105\u0107\5R*\2\u0106")
        buf.write("\u0104\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0106\3\2\2\2")
        buf.write("\u0108\u0109\3\2\2\2\u0109\u0114\3\2\2\2\u010a\u010b\7")
        buf.write("M\2\2\u010b\u010c\7!\2\2\u010c\u0111\5D#\2\u010d\u010e")
        buf.write("\7\7\2\2\u010e\u0110\5D#\2\u010f\u010d\3\2\2\2\u0110\u0113")
        buf.write("\3\2\2\2\u0111\u010f\3\2\2\2\u0111\u0112\3\2\2\2\u0112")
        buf.write("\u0115\3\2\2\2\u0113\u0111\3\2\2\2\u0114\u010a\3\2\2\2")
        buf.write("\u0114\u0115\3\2\2\2\u0115\u011c\3\2\2\2\u0116\u0117\7")
        buf.write("C\2\2\u0117\u011a\5> \2\u0118\u0119\t\3\2\2\u0119\u011b")
        buf.write("\5> \2\u011a\u0118\3\2\2\2\u011a\u011b\3\2\2\2\u011b\u011d")
        buf.write("\3\2\2\2\u011c\u0116\3\2\2\2\u011c\u011d\3\2\2\2\u011d")
        buf.write("\37\3\2\2\2\u011e\u011f\7\'\2\2\u011f\u0120\79\2\2\u0120")
        buf.write("\u0121\5z>\2\u0121\u0122\7K\2\2\u0122\u0123\5l\67\2\u0123")
        buf.write("\u0124\7\5\2\2\u0124\u0129\5t;\2\u0125\u0126\7\7\2\2\u0126")
        buf.write("\u0128\5t;\2\u0127\u0125\3\2\2\2\u0128\u012b\3\2\2\2\u0129")
        buf.write("\u0127\3\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2")
        buf.write("\u012b\u0129\3\2\2\2\u012c\u012d\7\6\2\2\u012d!\3\2\2")
        buf.write("\2\u012e\u012f\7\'\2\2\u012f\u0130\7U\2\2\u0130\u0145")
        buf.write("\5l\67\2\u0131\u0132\7\5\2\2\u0132\u0137\58\35\2\u0133")
        buf.write("\u0134\7\7\2\2\u0134\u0136\58\35\2\u0135\u0133\3\2\2\2")
        buf.write("\u0136\u0139\3\2\2\2\u0137\u0135\3\2\2\2\u0137\u0138\3")
        buf.write("\2\2\2\u0138\u013e\3\2\2\2\u0139\u0137\3\2\2\2\u013a\u013b")
        buf.write("\7\7\2\2\u013b\u013d\5B\"\2\u013c\u013a\3\2\2\2\u013d")
        buf.write("\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\u0141\3\2\2\2\u0140\u013e\3\2\2\2\u0141\u0142\7")
        buf.write("\6\2\2\u0142\u0146\3\2\2\2\u0143\u0144\7\36\2\2\u0144")
        buf.write("\u0146\5\62\32\2\u0145\u0131\3\2\2\2\u0145\u0143\3\2\2")
        buf.write("\2\u0146#\3\2\2\2\u0147\u0148\7+\2\2\u0148\u0149\7\63")
        buf.write("\2\2\u0149\u014c\5l\67\2\u014a\u014b\7_\2\2\u014b\u014d")
        buf.write("\5> \2\u014c\u014a\3\2\2\2\u014c\u014d\3\2\2\2\u014d%")
        buf.write("\3\2\2\2\u014e\u014f\7.\2\2\u014f\u0150\79\2\2\u0150\u0151")
        buf.write("\5z>\2\u0151\'\3\2\2\2\u0152\u0153\7.\2\2\u0153\u0154")
        buf.write("\7U\2\2\u0154\u0155\5l\67\2\u0155)\3\2\2\2\u0156\u015c")
        buf.write("\5R*\2\u0157\u0158\5T+\2\u0158\u0159\5R*\2\u0159\u015b")
        buf.write("\3\2\2\2\u015a\u0157\3\2\2\2\u015b\u015e\3\2\2\2\u015c")
        buf.write("\u015a\3\2\2\2\u015c\u015d\3\2\2\2\u015d\u0169\3\2\2\2")
        buf.write("\u015e\u015c\3\2\2\2\u015f\u0160\7M\2\2\u0160\u0161\7")
        buf.write("!\2\2\u0161\u0166\5D#\2\u0162\u0163\7\7\2\2\u0163\u0165")
        buf.write("\5D#\2\u0164\u0162\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0164")
        buf.write("\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u016a\3\2\2\2\u0168")
        buf.write("\u0166\3\2\2\2\u0169\u015f\3\2\2\2\u0169\u016a\3\2\2\2")
        buf.write("\u016a\u0171\3\2\2\2\u016b\u016c\7C\2\2\u016c\u016f\5")
        buf.write("> \2\u016d\u016e\t\3\2\2\u016e\u0170\5> \2\u016f\u016d")
        buf.write("\3\2\2\2\u016f\u0170\3\2\2\2\u0170\u0172\3\2\2\2\u0171")
        buf.write("\u016b\3\2\2\2\u0171\u0172\3\2\2\2\u0172+\3\2\2\2\u0173")
        buf.write("\u0174\7;\2\2\u0174\u0175\7=\2\2\u0175\u0181\5l\67\2\u0176")
        buf.write("\u0177\7\5\2\2\u0177\u017c\5t;\2\u0178\u0179\7\7\2\2\u0179")
        buf.write("\u017b\5t;\2\u017a\u0178\3\2\2\2\u017b\u017e\3\2\2\2\u017c")
        buf.write("\u017a\3\2\2\2\u017c\u017d\3\2\2\2\u017d\u017f\3\2\2\2")
        buf.write("\u017e\u017c\3\2\2\2\u017f\u0180\7\6\2\2\u0180\u0182\3")
        buf.write("\2\2\2\u0181\u0176\3\2\2\2\u0181\u0182\3\2\2\2\u0182\u0183")
        buf.write("\3\2\2\2\u0183\u0184\7^\2\2\u0184\u0185\7\5\2\2\u0185")
        buf.write("\u018a\5> \2\u0186\u0187\7\7\2\2\u0187\u0189\5> \2\u0188")
        buf.write("\u0186\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2\2")
        buf.write("\u018a\u018b\3\2\2\2\u018b\u018d\3\2\2\2\u018c\u018a\3")
        buf.write("\2\2\2\u018d\u018e\7\6\2\2\u018e-\3\2\2\2\u018f\u0190")
        buf.write("\7Q\2\2\u0190/\3\2\2\2\u0191\u019c\5R*\2\u0192\u0193\7")
        buf.write("M\2\2\u0193\u0194\7!\2\2\u0194\u0199\5D#\2\u0195\u0196")
        buf.write("\7\7\2\2\u0196\u0198\5D#\2\u0197\u0195\3\2\2\2\u0198\u019b")
        buf.write("\3\2\2\2\u0199\u0197\3\2\2\2\u0199\u019a\3\2\2\2\u019a")
        buf.write("\u019d\3\2\2\2\u019b\u0199\3\2\2\2\u019c\u0192\3\2\2\2")
        buf.write("\u019c\u019d\3\2\2\2\u019d\u01a4\3\2\2\2\u019e\u019f\7")
        buf.write("C\2\2\u019f\u01a2\5> \2\u01a0\u01a1\t\3\2\2\u01a1\u01a3")
        buf.write("\5> \2\u01a2\u01a0\3\2\2\2\u01a2\u01a3\3\2\2\2\u01a3\u01a5")
        buf.write("\3\2\2\2\u01a4\u019e\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5")
        buf.write("\61\3\2\2\2\u01a6\u01ac\5\64\33\2\u01a7\u01a8\5T+\2\u01a8")
        buf.write("\u01a9\5\64\33\2\u01a9\u01ab\3\2\2\2\u01aa\u01a7\3\2\2")
        buf.write("\2\u01ab\u01ae\3\2\2\2\u01ac\u01aa\3\2\2\2\u01ac\u01ad")
        buf.write("\3\2\2\2\u01ad\u01b9\3\2\2\2\u01ae\u01ac\3\2\2\2\u01af")
        buf.write("\u01b0\7M\2\2\u01b0\u01b1\7!\2\2\u01b1\u01b6\5D#\2\u01b2")
        buf.write("\u01b3\7\7\2\2\u01b3\u01b5\5D#\2\u01b4\u01b2\3\2\2\2\u01b5")
        buf.write("\u01b8\3\2\2\2\u01b6\u01b4\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\u01ba\3\2\2\2\u01b8\u01b6\3\2\2\2\u01b9\u01af\3")
        buf.write("\2\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01c1\3\2\2\2\u01bb\u01bc")
        buf.write("\7C\2\2\u01bc\u01bf\5> \2\u01bd\u01be\t\3\2\2\u01be\u01c0")
        buf.write("\5> \2\u01bf\u01bd\3\2\2\2\u01bf\u01c0\3\2\2\2\u01c0\u01c2")
        buf.write("\3\2\2\2\u01c1\u01bb\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2")
        buf.write("\63\3\2\2\2\u01c3\u01c5\7R\2\2\u01c4\u01c6\7-\2\2\u01c5")
        buf.write("\u01c4\3\2\2\2\u01c5\u01c6\3\2\2\2\u01c6\u01c7\3\2\2\2")
        buf.write("\u01c7\u01cc\5H%\2\u01c8\u01c9\7\7\2\2\u01c9\u01cb\5H")
        buf.write("%\2\u01ca\u01c8\3\2\2\2\u01cb\u01ce\3\2\2\2\u01cc\u01ca")
        buf.write("\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01db\3\2\2\2\u01ce")
        buf.write("\u01cc\3\2\2\2\u01cf\u01d9\7\63\2\2\u01d0\u01d5\5J&\2")
        buf.write("\u01d1\u01d2\7\7\2\2\u01d2\u01d4\5J&\2\u01d3\u01d1\3\2")
        buf.write("\2\2\u01d4\u01d7\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6")
        buf.write("\3\2\2\2\u01d6\u01da\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8")
        buf.write("\u01da\5L\'\2\u01d9\u01d0\3\2\2\2\u01d9\u01d8\3\2\2\2")
        buf.write("\u01da\u01dc\3\2\2\2\u01db\u01cf\3\2\2\2\u01db\u01dc\3")
        buf.write("\2\2\2\u01dc\u01df\3\2\2\2\u01dd\u01de\7_\2\2\u01de\u01e0")
        buf.write("\5> \2\u01df\u01dd\3\2\2\2\u01df\u01e0\3\2\2\2\u01e0\u01ef")
        buf.write("\3\2\2\2\u01e1\u01e2\7\65\2\2\u01e2\u01e3\7!\2\2\u01e3")
        buf.write("\u01e8\5> \2\u01e4\u01e5\7\7\2\2\u01e5\u01e7\5> \2\u01e6")
        buf.write("\u01e4\3\2\2\2\u01e7\u01ea\3\2\2\2\u01e8\u01e6\3\2\2\2")
        buf.write("\u01e8\u01e9\3\2\2\2\u01e9\u01ed\3\2\2\2\u01ea\u01e8\3")
        buf.write("\2\2\2\u01eb\u01ec\7\66\2\2\u01ec\u01ee\5> \2\u01ed\u01eb")
        buf.write("\3\2\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01f0\3\2\2\2\u01ef")
        buf.write("\u01e1\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u020e\3\2\2\2")
        buf.write("\u01f1\u01f2\7^\2\2\u01f2\u01f3\7\5\2\2\u01f3\u01f8\5")
        buf.write("> \2\u01f4\u01f5\7\7\2\2\u01f5\u01f7\5> \2\u01f6\u01f4")
        buf.write("\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fb\3\2\2\2\u01fa\u01f8\3\2\2\2")
        buf.write("\u01fb\u020a\7\6\2\2\u01fc\u01fd\7\7\2\2\u01fd\u01fe\7")
        buf.write("\5\2\2\u01fe\u0203\5> \2\u01ff\u0200\7\7\2\2\u0200\u0202")
        buf.write("\5> \2\u0201\u01ff\3\2\2\2\u0202\u0205\3\2\2\2\u0203\u0201")
        buf.write("\3\2\2\2\u0203\u0204\3\2\2\2\u0204\u0206\3\2\2\2\u0205")
        buf.write("\u0203\3\2\2\2\u0206\u0207\7\6\2\2\u0207\u0209\3\2\2\2")
        buf.write("\u0208\u01fc\3\2\2\2\u0209\u020c\3\2\2\2\u020a\u0208\3")
        buf.write("\2\2\2\u020a\u020b\3\2\2\2\u020b\u020e\3\2\2\2\u020c\u020a")
        buf.write("\3\2\2\2\u020d\u01c3\3\2\2\2\u020d\u01f1\3\2\2\2\u020e")
        buf.write("\65\3\2\2\2\u020f\u0210\7\\\2\2\u0210\u0211\5l\67\2\u0211")
        buf.write("\u0212\7S\2\2\u0212\u0213\5t;\2\u0213\u0214\7\b\2\2\u0214")
        buf.write("\u021c\5> \2\u0215\u0216\7\7\2\2\u0216\u0217\5t;\2\u0217")
        buf.write("\u0218\7\b\2\2\u0218\u0219\5> \2\u0219\u021b\3\2\2\2\u021a")
        buf.write("\u0215\3\2\2\2\u021b\u021e\3\2\2\2\u021c\u021a\3\2\2\2")
        buf.write("\u021c\u021d\3\2\2\2\u021d\u0221\3\2\2\2\u021e\u021c\3")
        buf.write("\2\2\2\u021f\u0220\7_\2\2\u0220\u0222\5> \2\u0221\u021f")
        buf.write("\3\2\2\2\u0221\u0222\3\2\2\2\u0222\67\3\2\2\2\u0223\u0224")
        buf.write("\5t;\2\u0224\u0228\5:\36\2\u0225\u0227\5<\37\2\u0226\u0225")
        buf.write("\3\2\2\2\u0227\u022a\3\2\2\2\u0228\u0226\3\2\2\2\u0228")
        buf.write("\u0229\3\2\2\2\u02299\3\2\2\2\u022a\u0228\3\2\2\2\u022b")
        buf.write("\u022d\5f\64\2\u022c\u022b\3\2\2\2\u022d\u022e\3\2\2\2")
        buf.write("\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2\u022f\u023a\3")
        buf.write("\2\2\2\u0230\u0231\7\5\2\2\u0231\u0232\5X-\2\u0232\u0233")
        buf.write("\7\6\2\2\u0233\u023b\3\2\2\2\u0234\u0235\7\5\2\2\u0235")
        buf.write("\u0236\5X-\2\u0236\u0237\7\7\2\2\u0237\u0238\5X-\2\u0238")
        buf.write("\u0239\7\6\2\2\u0239\u023b\3\2\2\2\u023a\u0230\3\2\2\2")
        buf.write("\u023a\u0234\3\2\2\2\u023a\u023b\3\2\2\2\u023b;\3\2\2")
        buf.write("\2\u023c\u0243\7*\2\2\u023d\u0244\5X-\2\u023e\u0244\5")
        buf.write("Z.\2\u023f\u0240\7\5\2\2\u0240\u0241\5> \2\u0241\u0242")
        buf.write("\7\6\2\2\u0242\u0244\3\2\2\2\u0243\u023d\3\2\2\2\u0243")
        buf.write("\u023e\3\2\2\2\u0243\u023f\3\2\2\2\u0244=\3\2\2\2\u0245")
        buf.write("\u0246\b \1\2\u0246\u0274\5Z.\2\u0247\u0274\7b\2\2\u0248")
        buf.write("\u0249\5l\67\2\u0249\u024a\7\4\2\2\u024a\u024c\3\2\2\2")
        buf.write("\u024b\u0248\3\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\3")
        buf.write("\2\2\2\u024d\u0274\5t;\2\u024e\u024f\5\\/\2\u024f\u0250")
        buf.write("\5> \23\u0250\u0274\3\2\2\2\u0251\u0252\5h\65\2\u0252")
        buf.write("\u025f\7\5\2\2\u0253\u0255\7-\2\2\u0254\u0253\3\2\2\2")
        buf.write("\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u025b\5")
        buf.write("> \2\u0257\u0258\7\7\2\2\u0258\u025a\5> \2\u0259\u0257")
        buf.write("\3\2\2\2\u025a\u025d\3\2\2\2\u025b\u0259\3\2\2\2\u025b")
        buf.write("\u025c\3\2\2\2\u025c\u0260\3\2\2\2\u025d\u025b\3\2\2\2")
        buf.write("\u025e\u0260\7\t\2\2\u025f\u0254\3\2\2\2\u025f\u025e\3")
        buf.write("\2\2\2\u025f\u0260\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u0262")
        buf.write("\7\6\2\2\u0262\u0274\3\2\2\2\u0263\u0264\7G\2\2\u0264")
        buf.write("\u0274\5> \t\u0265\u0266\7\5\2\2\u0266\u0267\5> \2\u0267")
        buf.write("\u0268\7\6\2\2\u0268\u0274\3\2\2\2\u0269\u026b\7G\2\2")
        buf.write("\u026a\u0269\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u026c\3")
        buf.write("\2\2\2\u026c\u026e\7\60\2\2\u026d\u026a\3\2\2\2\u026d")
        buf.write("\u026e\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\7\5\2\2")
        buf.write("\u0270\u0271\5\62\32\2\u0271\u0272\7\6\2\2\u0272\u0274")
        buf.write("\3\2\2\2\u0273\u0245\3\2\2\2\u0273\u0247\3\2\2\2\u0273")
        buf.write("\u024b\3\2\2\2\u0273\u024e\3\2\2\2\u0273\u0251\3\2\2\2")
        buf.write("\u0273\u0263\3\2\2\2\u0273\u0265\3\2\2\2\u0273\u026d\3")
        buf.write("\2\2\2\u0274\u02be\3\2\2\2\u0275\u0276\f\22\2\2\u0276")
        buf.write("\u0277\7\r\2\2\u0277\u02bd\5> \23\u0278\u0279\f\21\2\2")
        buf.write("\u0279\u027a\t\4\2\2\u027a\u02bd\5> \22\u027b\u027c\f")
        buf.write("\20\2\2\u027c\u027d\t\5\2\2\u027d\u02bd\5> \21\u027e\u027f")
        buf.write("\f\17\2\2\u027f\u0280\t\6\2\2\u0280\u02bd\5> \20\u0281")
        buf.write("\u0282\f\16\2\2\u0282\u0283\t\7\2\2\u0283\u02bd\5> \17")
        buf.write("\u0284\u028f\f\r\2\2\u0285\u0290\7\b\2\2\u0286\u0290\7")
        buf.write("\30\2\2\u0287\u0290\7\31\2\2\u0288\u0290\7\32\2\2\u0289")
        buf.write("\u0290\7>\2\2\u028a\u028b\7>\2\2\u028b\u0290\7G\2\2\u028c")
        buf.write("\u0290\78\2\2\u028d\u0290\7B\2\2\u028e\u0290\7D\2\2\u028f")
        buf.write("\u0285\3\2\2\2\u028f\u0286\3\2\2\2\u028f\u0287\3\2\2\2")
        buf.write("\u028f\u0288\3\2\2\2\u028f\u0289\3\2\2\2\u028f\u028a\3")
        buf.write("\2\2\2\u028f\u028c\3\2\2\2\u028f\u028d\3\2\2\2\u028f\u028e")
        buf.write("\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u02bd\5> \16\u0292")
        buf.write("\u0293\f\f\2\2\u0293\u0294\7\35\2\2\u0294\u02bd\5> \r")
        buf.write("\u0295\u0296\f\13\2\2\u0296\u0297\7L\2\2\u0297\u02bd\5")
        buf.write("> \f\u0298\u029a\f\7\2\2\u0299\u029b\7G\2\2\u029a\u0299")
        buf.write("\3\2\2\2\u029a\u029b\3\2\2\2\u029b\u029c\3\2\2\2\u029c")
        buf.write("\u029d\7B\2\2\u029d\u02bd\5> \b\u029e\u029f\f\5\2\2\u029f")
        buf.write("\u02a1\7>\2\2\u02a0\u02a2\7G\2\2\u02a1\u02a0\3\2\2\2\u02a1")
        buf.write("\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02bd\5> \6\u02a4")
        buf.write("\u02a5\f\6\2\2\u02a5\u02a6\7G\2\2\u02a6\u02bd\7H\2\2\u02a7")
        buf.write("\u02a9\f\4\2\2\u02a8\u02aa\7G\2\2\u02a9\u02a8\3\2\2\2")
        buf.write("\u02a9\u02aa\3\2\2\2\u02aa\u02ab\3\2\2\2\u02ab\u02ba\7")
        buf.write("8\2\2\u02ac\u02b6\7\5\2\2\u02ad\u02b7\5\62\32\2\u02ae")
        buf.write("\u02b3\5> \2\u02af\u02b0\7\7\2\2\u02b0\u02b2\5> \2\u02b1")
        buf.write("\u02af\3\2\2\2\u02b2\u02b5\3\2\2\2\u02b3\u02b1\3\2\2\2")
        buf.write("\u02b3\u02b4\3\2\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3")
        buf.write("\2\2\2\u02b6\u02ad\3\2\2\2\u02b6\u02ae\3\2\2\2\u02b6\u02b7")
        buf.write("\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02bb\7\6\2\2\u02b9")
        buf.write("\u02bb\5l\67\2\u02ba\u02ac\3\2\2\2\u02ba\u02b9\3\2\2\2")
        buf.write("\u02bb\u02bd\3\2\2\2\u02bc\u0275\3\2\2\2\u02bc\u0278\3")
        buf.write("\2\2\2\u02bc\u027b\3\2\2\2\u02bc\u027e\3\2\2\2\u02bc\u0281")
        buf.write("\3\2\2\2\u02bc\u0284\3\2\2\2\u02bc\u0292\3\2\2\2\u02bc")
        buf.write("\u0295\3\2\2\2\u02bc\u0298\3\2\2\2\u02bc\u029e\3\2\2\2")
        buf.write("\u02bc\u02a4\3\2\2\2\u02bc\u02a7\3\2\2\2\u02bd\u02c0\3")
        buf.write("\2\2\2\u02be\u02bc\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf?")
        buf.write("\3\2\2\2\u02c0\u02be\3\2\2\2\u02c1\u02c2\7O\2\2\u02c2")
        buf.write("\u02ce\5x=\2\u02c3\u02c4\7\5\2\2\u02c4\u02c9\5t;\2\u02c5")
        buf.write("\u02c6\7\7\2\2\u02c6\u02c8\5t;\2\u02c7\u02c5\3\2\2\2\u02c8")
        buf.write("\u02cb\3\2\2\2\u02c9\u02c7\3\2\2\2\u02c9\u02ca\3\2\2\2")
        buf.write("\u02ca\u02cc\3\2\2\2\u02cb\u02c9\3\2\2\2\u02cc\u02cd\7")
        buf.write("\6\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02c3\3\2\2\2\u02ce\u02cf")
        buf.write("\3\2\2\2\u02cfA\3\2\2\2\u02d0\u02d1\7&\2\2\u02d1\u02f5")
        buf.write("\5f\64\2\u02d2\u02d3\7N\2\2\u02d3\u02d6\7@\2\2\u02d4\u02d6")
        buf.write("\7[\2\2\u02d5\u02d2\3\2\2\2\u02d5\u02d4\3\2\2\2\u02d6")
        buf.write("\u02d7\3\2\2\2\u02d7\u02d8\7\5\2\2\u02d8\u02dd\5t;\2\u02d9")
        buf.write("\u02da\7\7\2\2\u02da\u02dc\5t;\2\u02db\u02d9\3\2\2\2\u02dc")
        buf.write("\u02df\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd\u02de\3\2\2\2")
        buf.write("\u02de\u02e0\3\2\2\2\u02df\u02dd\3\2\2\2\u02e0\u02e1\7")
        buf.write("\6\2\2\u02e1\u02f6\3\2\2\2\u02e2\u02e3\7\"\2\2\u02e3\u02e4")
        buf.write("\7\5\2\2\u02e4\u02e5\5> \2\u02e5\u02e6\7\6\2\2\u02e6\u02f6")
        buf.write("\3\2\2\2\u02e7\u02e8\7\62\2\2\u02e8\u02e9\7@\2\2\u02e9")
        buf.write("\u02ea\7\5\2\2\u02ea\u02ef\5t;\2\u02eb\u02ec\7\7\2\2\u02ec")
        buf.write("\u02ee\5t;\2\u02ed\u02eb\3\2\2\2\u02ee\u02f1\3\2\2\2\u02ef")
        buf.write("\u02ed\3\2\2\2\u02ef\u02f0\3\2\2\2\u02f0\u02f2\3\2\2\2")
        buf.write("\u02f1\u02ef\3\2\2\2\u02f2\u02f3\7\6\2\2\u02f3\u02f4\5")
        buf.write("@!\2\u02f4\u02f6\3\2\2\2\u02f5\u02d5\3\2\2\2\u02f5\u02e2")
        buf.write("\3\2\2\2\u02f5\u02e7\3\2\2\2\u02f6C\3\2\2\2\u02f7\u02f9")
        buf.write("\5> \2\u02f8\u02fa\t\b\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa")
        buf.write("\3\2\2\2\u02faE\3\2\2\2\u02fb\u0307\5l\67\2\u02fc\u02fd")
        buf.write("\7\5\2\2\u02fd\u0302\5t;\2\u02fe\u02ff\7\7\2\2\u02ff\u0301")
        buf.write("\5t;\2\u0300\u02fe\3\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300")
        buf.write("\3\2\2\2\u0302\u0303\3\2\2\2\u0303\u0305\3\2\2\2\u0304")
        buf.write("\u0302\3\2\2\2\u0305\u0306\7\6\2\2\u0306\u0308\3\2\2\2")
        buf.write("\u0307\u02fc\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3")
        buf.write("\2\2\2\u0309\u030a\7\36\2\2\u030a\u030b\7\5\2\2\u030b")
        buf.write("\u030c\5\62\32\2\u030c\u030d\7\6\2\2\u030dG\3\2\2\2\u030e")
        buf.write("\u031b\7\t\2\2\u030f\u0310\5l\67\2\u0310\u0311\7\4\2\2")
        buf.write("\u0311\u0312\7\t\2\2\u0312\u031b\3\2\2\2\u0313\u0318\5")
        buf.write("> \2\u0314\u0316\7\36\2\2\u0315\u0314\3\2\2\2\u0315\u0316")
        buf.write("\3\2\2\2\u0316\u0317\3\2\2\2\u0317\u0319\5b\62\2\u0318")
        buf.write("\u0315\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031b\3\2\2\2")
        buf.write("\u031a\u030e\3\2\2\2\u031a\u030f\3\2\2\2\u031a\u0313\3")
        buf.write("\2\2\2\u031bI\3\2\2\2\u031c\u0321\5l\67\2\u031d\u031f")
        buf.write("\7\36\2\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f")
        buf.write("\u0320\3\2\2\2\u0320\u0322\5\u0082B\2\u0321\u031e\3\2")
        buf.write("\2\2\u0321\u0322\3\2\2\2\u0322\u0340\3\2\2\2\u0323\u032d")
        buf.write("\7\5\2\2\u0324\u0329\5J&\2\u0325\u0326\7\7\2\2\u0326\u0328")
        buf.write("\5J&\2\u0327\u0325\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032e\3\2\2\2\u032b")
        buf.write("\u0329\3\2\2\2\u032c\u032e\5L\'\2\u032d\u0324\3\2\2\2")
        buf.write("\u032d\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0334\7")
        buf.write("\6\2\2\u0330\u0332\7\36\2\2\u0331\u0330\3\2\2\2\u0331")
        buf.write("\u0332\3\2\2\2\u0332\u0333\3\2\2\2\u0333\u0335\5\u0082")
        buf.write("B\2\u0334\u0331\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0340")
        buf.write("\3\2\2\2\u0336\u0337\7\5\2\2\u0337\u0338\5\62\32\2\u0338")
        buf.write("\u033d\7\6\2\2\u0339\u033b\7\36\2\2\u033a\u0339\3\2\2")
        buf.write("\2\u033a\u033b\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033e")
        buf.write("\5\u0082B\2\u033d\u033a\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0340\3\2\2\2\u033f\u031c\3\2\2\2\u033f\u0323\3\2\2\2")
        buf.write("\u033f\u0336\3\2\2\2\u0340K\3\2\2\2\u0341\u0348\5J&\2")
        buf.write("\u0342\u0343\5N(\2\u0343\u0344\5J&\2\u0344\u0345\5P)\2")
        buf.write("\u0345\u0347\3\2\2\2\u0346\u0342\3\2\2\2\u0347\u034a\3")
        buf.write("\2\2\2\u0348\u0346\3\2\2\2\u0348\u0349\3\2\2\2\u0349M")
        buf.write("\3\2\2\2\u034a\u0348\3\2\2\2\u034b\u034f\7\7\2\2\u034c")
        buf.write("\u034d\t\t\2\2\u034d\u034f\7?\2\2\u034e\u034b\3\2\2\2")
        buf.write("\u034e\u034c\3\2\2\2\u034fO\3\2\2\2\u0350\u0351\7K\2\2")
        buf.write("\u0351\u0353\5> \2\u0352\u0350\3\2\2\2\u0352\u0353\3\2")
        buf.write("\2\2\u0353Q\3\2\2\2\u0354\u0356\7R\2\2\u0355\u0357\7-")
        buf.write("\2\2\u0356\u0355\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u0358")
        buf.write("\3\2\2\2\u0358\u035d\5H%\2\u0359\u035a\7\7\2\2\u035a\u035c")
        buf.write("\5H%\2\u035b\u0359\3\2\2\2\u035c\u035f\3\2\2\2\u035d\u035b")
        buf.write("\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u036c\3\2\2\2\u035f")
        buf.write("\u035d\3\2\2\2\u0360\u036a\7\63\2\2\u0361\u0366\5J&\2")
        buf.write("\u0362\u0363\7\7\2\2\u0363\u0365\5J&\2\u0364\u0362\3\2")
        buf.write("\2\2\u0365\u0368\3\2\2\2\u0366\u0364\3\2\2\2\u0366\u0367")
        buf.write("\3\2\2\2\u0367\u036b\3\2\2\2\u0368\u0366\3\2\2\2\u0369")
        buf.write("\u036b\5L\'\2\u036a\u0361\3\2\2\2\u036a\u0369\3\2\2\2")
        buf.write("\u036b\u036d\3\2\2\2\u036c\u0360\3\2\2\2\u036c\u036d\3")
        buf.write("\2\2\2\u036d\u0370\3\2\2\2\u036e\u036f\7_\2\2\u036f\u0371")
        buf.write("\5> \2\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0380")
        buf.write("\3\2\2\2\u0372\u0373\7\65\2\2\u0373\u0374\7!\2\2\u0374")
        buf.write("\u0379\5> \2\u0375\u0376\7\7\2\2\u0376\u0378\5> \2\u0377")
        buf.write("\u0375\3\2\2\2\u0378\u037b\3\2\2\2\u0379\u0377\3\2\2\2")
        buf.write("\u0379\u037a\3\2\2\2\u037a\u037e\3\2\2\2\u037b\u0379\3")
        buf.write("\2\2\2\u037c\u037d\7\66\2\2\u037d\u037f\5> \2\u037e\u037c")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380")
        buf.write("\u0372\3\2\2\2\u0380\u0381\3\2\2\2\u0381\u039f\3\2\2\2")
        buf.write("\u0382\u0383\7^\2\2\u0383\u0384\7\5\2\2\u0384\u0389\5")
        buf.write("> \2\u0385\u0386\7\7\2\2\u0386\u0388\5> \2\u0387\u0385")
        buf.write("\3\2\2\2\u0388\u038b\3\2\2\2\u0389\u0387\3\2\2\2\u0389")
        buf.write("\u038a\3\2\2\2\u038a\u038c\3\2\2\2\u038b\u0389\3\2\2\2")
        buf.write("\u038c\u039b\7\6\2\2\u038d\u038e\7\7\2\2\u038e\u038f\7")
        buf.write("\5\2\2\u038f\u0394\5> \2\u0390\u0391\7\7\2\2\u0391\u0393")
        buf.write("\5> \2\u0392\u0390\3\2\2\2\u0393\u0396\3\2\2\2\u0394\u0392")
        buf.write("\3\2\2\2\u0394\u0395\3\2\2\2\u0395\u0397\3\2\2\2\u0396")
        buf.write("\u0394\3\2\2\2\u0397\u0398\7\6\2\2\u0398\u039a\3\2\2\2")
        buf.write("\u0399\u038d\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399\3")
        buf.write("\2\2\2\u039b\u039c\3\2\2\2\u039c\u039f\3\2\2\2\u039d\u039b")
        buf.write("\3\2\2\2\u039e\u0354\3\2\2\2\u039e\u0382\3\2\2\2\u039f")
        buf.write("S\3\2\2\2\u03a0\u03a1\t\2\2\2\u03a1U\3\2\2\2\u03a2\u03ae")
        buf.write("\5l\67\2\u03a3\u03a4\7\5\2\2\u03a4\u03a9\5t;\2\u03a5\u03a6")
        buf.write("\7\7\2\2\u03a6\u03a8\5t;\2\u03a7\u03a5\3\2\2\2\u03a8\u03ab")
        buf.write("\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa")
        buf.write("\u03ac\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ac\u03ad\7\6\2\2")
        buf.write("\u03ad\u03af\3\2\2\2\u03ae\u03a3\3\2\2\2\u03ae\u03af\3")
        buf.write("\2\2\2\u03afW\3\2\2\2\u03b0\u03b2\t\5\2\2\u03b1\u03b0")
        buf.write("\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3")
        buf.write("\u03b4\7a\2\2\u03b4Y\3\2\2\2\u03b5\u03b6\t\n\2\2\u03b6")
        buf.write("[\3\2\2\2\u03b7\u03b8\t\13\2\2\u03b8]\3\2\2\2\u03b9\u03ba")
        buf.write("\7c\2\2\u03ba_\3\2\2\2\u03bb\u03be\5> \2\u03bc\u03be\5")
        buf.write("8\35\2\u03bd\u03bb\3\2\2\2\u03bd\u03bc\3\2\2\2\u03bea")
        buf.write("\3\2\2\2\u03bf\u03c0\t\f\2\2\u03c0c\3\2\2\2\u03c1\u03c2")
        buf.write("\t\r\2\2\u03c2e\3\2\2\2\u03c3\u03c4\5\u0086D\2\u03c4g")
        buf.write("\3\2\2\2\u03c5\u03c6\5\u0086D\2\u03c6i\3\2\2\2\u03c7\u03c8")
        buf.write("\5\u0086D\2\u03c8k\3\2\2\2\u03c9\u03ca\5\u0086D\2\u03ca")
        buf.write("m\3\2\2\2\u03cb\u03cc\5\u0086D\2\u03cco\3\2\2\2\u03cd")
        buf.write("\u03ce\5\u0086D\2\u03ceq\3\2\2\2\u03cf\u03d0\5\u0086D")
        buf.write("\2\u03d0s\3\2\2\2\u03d1\u03d2\5\u0086D\2\u03d2u\3\2\2")
        buf.write("\2\u03d3\u03d4\5\u0086D\2\u03d4w\3\2\2\2\u03d5\u03d6\5")
        buf.write("\u0086D\2\u03d6y\3\2\2\2\u03d7\u03d8\5\u0086D\2\u03d8")
        buf.write("{\3\2\2\2\u03d9\u03da\5\u0086D\2\u03da}\3\2\2\2\u03db")
        buf.write("\u03dc\5\u0086D\2\u03dc\177\3\2\2\2\u03dd\u03de\5\u0086")
        buf.write("D\2\u03de\u0081\3\2\2\2\u03df\u03e0\5\u0086D\2\u03e0\u0083")
        buf.write("\3\2\2\2\u03e1\u03e2\5\u0086D\2\u03e2\u0085\3\2\2\2\u03e3")
        buf.write("\u03eb\7`\2\2\u03e4\u03eb\5d\63\2\u03e5\u03eb\7c\2\2\u03e6")
        buf.write("\u03e7\7\5\2\2\u03e7\u03e8\5\u0086D\2\u03e8\u03e9\7\6")
        buf.write("\2\2\u03e9\u03eb\3\2\2\2\u03ea\u03e3\3\2\2\2\u03ea\u03e4")
        buf.write("\3\2\2\2\u03ea\u03e5\3\2\2\2\u03ea\u03e6\3\2\2\2\u03eb")
        buf.write("\u0087\3\2\2\2v\u008a\u008c\u0097\u009e\u00a3\u00a9\u00c2")
        buf.write("\u00ee\u00f8\u00fa\u00ff\u0101\u0108\u0111\u0114\u011a")
        buf.write("\u011c\u0129\u0137\u013e\u0145\u014c\u015c\u0166\u0169")
        buf.write("\u016f\u0171\u017c\u0181\u018a\u0199\u019c\u01a2\u01a4")
        buf.write("\u01ac\u01b6\u01b9\u01bf\u01c1\u01c5\u01cc\u01d5\u01d9")
        buf.write("\u01db\u01df\u01e8\u01ed\u01ef\u01f8\u0203\u020a\u020d")
        buf.write("\u021c\u0221\u0228\u022e\u023a\u0243\u024b\u0254\u025b")
        buf.write("\u025f\u026a\u026d\u0273\u028f\u029a\u02a1\u02a9\u02b3")
        buf.write("\u02b6\u02ba\u02bc\u02be\u02c9\u02ce\u02d5\u02dd\u02ef")
        buf.write("\u02f5\u02f9\u0302\u0307\u0315\u0318\u031a\u031e\u0321")
        buf.write("\u0329\u032d\u0331\u0334\u033a\u033d\u033f\u0348\u034e")
        buf.write("\u0352\u0356\u035d\u0366\u036a\u036c\u0370\u0379\u037e")
        buf.write("\u0380\u0389\u0394\u039b\u039e\u03a9\u03ae\u03b1\u03bd")
        buf.write("\u03ea")
        return buf.getvalue()


class sqlParser ( Parser ):

    grammarFileName = "sql.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", "'<<'", 
                     "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", "'>='", 
                     "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "PLUS", "MINUS", "TILDE", 
                      "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", "PIPE", 
                      "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", "NOT_EQ2", 
                      "K_ADD", "K_ALTER", "K_AND", "K_AS", "K_ASC", "K_BEGIN", 
                      "K_BY", "K_CHECK", "K_COLUMN", "K_COLUMNS", "K_COMMIT", 
                      "K_CONSTRAINT", "K_CREATE", "K_DATABASE", "K_DATABASES", 
                      "K_DEFAULT", "K_DELETE", "K_DESC", "K_DISTINCT", "K_DROP", 
                      "K_EXCEPT", "K_EXISTS", "K_FOR", "K_FOREIGN", "K_FROM", 
                      "K_FULL", "K_GROUP", "K_HAVING", "K_IGNORE", "K_IN", 
                      "K_INDEX", "K_INNER", "K_INSERT", "K_INTERSECT", "K_INTO", 
                      "K_IS", "K_JOIN", "K_KEY", "K_LEFT", "K_LIKE", "K_LIMIT", 
                      "K_MATCH", "K_NATURAL", "K_NO", "K_NOT", "K_NULL", 
                      "K_OF", "K_OFFSET", "K_ON", "K_OR", "K_ORDER", "K_PRIMARY", 
                      "K_REFERENCES", "K_RENAME", "K_ROLLBACK", "K_SELECT", 
                      "K_SET", "K_SHOW", "K_TABLE", "K_TABLES", "K_THEN", 
                      "K_TO", "K_TRANSACTION", "K_UNION", "K_UNIQUE", "K_UPDATE", 
                      "K_USE", "K_VALUES", "K_WHERE", "IDENTIFIER", "NUMERIC_LITERAL", 
                      "BIND_PARAMETER", "STRING_LITERAL", "BLOB_LITERAL", 
                      "SINGLE_LINE_COMMENT", "MULTILINE_COMMENT", "SPACES", 
                      "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_create_database_stmt = 4
    RULE_alter_database_stmt = 5
    RULE_drop_database_stmt = 6
    RULE_show_databases_stmt = 7
    RULE_show_tables_stmt = 8
    RULE_use_database_stmt = 9
    RULE_alter_table_stmt = 10
    RULE_show_columns_stmt = 11
    RULE_begin_stmt = 12
    RULE_commit_stmt = 13
    RULE_compound_select_stmt = 14
    RULE_create_index_stmt = 15
    RULE_create_table_stmt = 16
    RULE_delete_stmt = 17
    RULE_drop_index_stmt = 18
    RULE_drop_table_stmt = 19
    RULE_factored_select_stmt = 20
    RULE_insert_stmt = 21
    RULE_rollback_stmt = 22
    RULE_simple_select_stmt = 23
    RULE_select_stmt = 24
    RULE_select_or_values = 25
    RULE_update_stmt = 26
    RULE_column_def = 27
    RULE_type_name = 28
    RULE_column_constraint = 29
    RULE_expr = 30
    RULE_foreign_key_clause = 31
    RULE_table_constraint = 32
    RULE_ordering_term = 33
    RULE_common_table_expression = 34
    RULE_result_column = 35
    RULE_table_or_subquery = 36
    RULE_join_clause = 37
    RULE_join_operator = 38
    RULE_join_constraint = 39
    RULE_select_core = 40
    RULE_compound_operator = 41
    RULE_cte_table_name = 42
    RULE_signed_number = 43
    RULE_literal_value = 44
    RULE_unary_operator = 45
    RULE_error_message = 46
    RULE_module_argument = 47
    RULE_column_alias = 48
    RULE_keyword = 49
    RULE_name = 50
    RULE_function_name = 51
    RULE_database_name = 52
    RULE_table_name = 53
    RULE_table_or_index_name = 54
    RULE_new_table_name = 55
    RULE_new_database_name = 56
    RULE_column_name = 57
    RULE_collation_name = 58
    RULE_foreign_table = 59
    RULE_index_name = 60
    RULE_trigger_name = 61
    RULE_view_name = 62
    RULE_module_name = 63
    RULE_table_alias = 64
    RULE_transaction_name = 65
    RULE_any_name = 66

    ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "create_database_stmt", 
                   "alter_database_stmt", "drop_database_stmt", "show_databases_stmt", 
                   "show_tables_stmt", "use_database_stmt", "alter_table_stmt", 
                   "show_columns_stmt", "begin_stmt", "commit_stmt", "compound_select_stmt", 
                   "create_index_stmt", "create_table_stmt", "delete_stmt", 
                   "drop_index_stmt", "drop_table_stmt", "factored_select_stmt", 
                   "insert_stmt", "rollback_stmt", "simple_select_stmt", 
                   "select_stmt", "select_or_values", "update_stmt", "column_def", 
                   "type_name", "column_constraint", "expr", "foreign_key_clause", 
                   "table_constraint", "ordering_term", "common_table_expression", 
                   "result_column", "table_or_subquery", "join_clause", 
                   "join_operator", "join_constraint", "select_core", "compound_operator", 
                   "cte_table_name", "signed_number", "literal_value", "unary_operator", 
                   "error_message", "module_argument", "column_alias", "keyword", 
                   "name", "function_name", "database_name", "table_name", 
                   "table_or_index_name", "new_table_name", "new_database_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "table_alias", 
                   "transaction_name", "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    PLUS=8
    MINUS=9
    TILDE=10
    PIPE2=11
    DIV=12
    MOD=13
    LT2=14
    GT2=15
    AMP=16
    PIPE=17
    LT=18
    LT_EQ=19
    GT=20
    GT_EQ=21
    EQ=22
    NOT_EQ1=23
    NOT_EQ2=24
    K_ADD=25
    K_ALTER=26
    K_AND=27
    K_AS=28
    K_ASC=29
    K_BEGIN=30
    K_BY=31
    K_CHECK=32
    K_COLUMN=33
    K_COLUMNS=34
    K_COMMIT=35
    K_CONSTRAINT=36
    K_CREATE=37
    K_DATABASE=38
    K_DATABASES=39
    K_DEFAULT=40
    K_DELETE=41
    K_DESC=42
    K_DISTINCT=43
    K_DROP=44
    K_EXCEPT=45
    K_EXISTS=46
    K_FOR=47
    K_FOREIGN=48
    K_FROM=49
    K_FULL=50
    K_GROUP=51
    K_HAVING=52
    K_IGNORE=53
    K_IN=54
    K_INDEX=55
    K_INNER=56
    K_INSERT=57
    K_INTERSECT=58
    K_INTO=59
    K_IS=60
    K_JOIN=61
    K_KEY=62
    K_LEFT=63
    K_LIKE=64
    K_LIMIT=65
    K_MATCH=66
    K_NATURAL=67
    K_NO=68
    K_NOT=69
    K_NULL=70
    K_OF=71
    K_OFFSET=72
    K_ON=73
    K_OR=74
    K_ORDER=75
    K_PRIMARY=76
    K_REFERENCES=77
    K_RENAME=78
    K_ROLLBACK=79
    K_SELECT=80
    K_SET=81
    K_SHOW=82
    K_TABLE=83
    K_TABLES=84
    K_THEN=85
    K_TO=86
    K_TRANSACTION=87
    K_UNION=88
    K_UNIQUE=89
    K_UPDATE=90
    K_USE=91
    K_VALUES=92
    K_WHERE=93
    IDENTIFIER=94
    NUMERIC_LITERAL=95
    BIND_PARAMETER=96
    STRING_LITERAL=97
    BLOB_LITERAL=98
    SINGLE_LINE_COMMENT=99
    MULTILINE_COMMENT=100
    SPACES=101
    UNEXPECTED_CHAR=102

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class ParseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(sqlParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(sqlParser.Sql_stmt_listContext,i)


        def error(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ErrorContext)
            else:
                return self.getTypedRuleContext(sqlParser.ErrorContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)




    def parse(self):

        localctx = sqlParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.SCOL) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DROP) | (1 << sqlParser.K_INSERT))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (sqlParser.K_ROLLBACK - 79)) | (1 << (sqlParser.K_SELECT - 79)) | (1 << (sqlParser.K_SHOW - 79)) | (1 << (sqlParser.K_UPDATE - 79)) | (1 << (sqlParser.K_USE - 79)) | (1 << (sqlParser.K_VALUES - 79)) | (1 << (sqlParser.UNEXPECTED_CHAR - 79)))) != 0):
                self.state = 136
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.SCOL, sqlParser.K_ALTER, sqlParser.K_BEGIN, sqlParser.K_COMMIT, sqlParser.K_CREATE, sqlParser.K_DELETE, sqlParser.K_DROP, sqlParser.K_INSERT, sqlParser.K_ROLLBACK, sqlParser.K_SELECT, sqlParser.K_SHOW, sqlParser.K_UPDATE, sqlParser.K_USE, sqlParser.K_VALUES]:
                    self.state = 134
                    self.sql_stmt_list()
                    pass
                elif token in [sqlParser.UNEXPECTED_CHAR]:
                    self.state = 135
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 141
            self.match(sqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ErrorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._UNEXPECTED_CHAR = None # Token

        def UNEXPECTED_CHAR(self):
            return self.getToken(sqlParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_error

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError" ):
                listener.enterError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError" ):
                listener.exitError(self)




    def error(self):

        localctx = sqlParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            localctx._UNEXPECTED_CHAR = self.match(sqlParser.UNEXPECTED_CHAR)
            raise Exception("UNEXPECTED_CHAR=" + (None if localctx._UNEXPECTED_CHAR is None else localctx._UNEXPECTED_CHAR.text))
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmt_listContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(sqlParser.Sql_stmtContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)




    def sql_stmt_list(self):

        localctx = sqlParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 149
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.SCOL:
                self.state = 146
                self.match(sqlParser.SCOL)
                self.state = 151
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 152
            self.sql_stmt()
            self.state = 161
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 154 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 153
                        self.match(sqlParser.SCOL)
                        self.state = 156 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==sqlParser.SCOL):
                            break

                    self.state = 158
                    self.sql_stmt() 
                self.state = 163
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 167
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 164
                    self.match(sqlParser.SCOL) 
                self.state = 169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Sql_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def create_database_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_database_stmtContext,0)


        def alter_database_stmt(self):
            return self.getTypedRuleContext(sqlParser.Alter_database_stmtContext,0)


        def drop_database_stmt(self):
            return self.getTypedRuleContext(sqlParser.Drop_database_stmtContext,0)


        def show_databases_stmt(self):
            return self.getTypedRuleContext(sqlParser.Show_databases_stmtContext,0)


        def show_tables_stmt(self):
            return self.getTypedRuleContext(sqlParser.Show_tables_stmtContext,0)


        def use_database_stmt(self):
            return self.getTypedRuleContext(sqlParser.Use_database_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_table_stmtContext,0)


        def alter_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Alter_table_stmtContext,0)


        def show_columns_stmt(self):
            return self.getTypedRuleContext(sqlParser.Show_columns_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(sqlParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(sqlParser.Commit_stmtContext,0)


        def compound_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Compound_select_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Create_index_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(sqlParser.Delete_stmtContext,0)


        def drop_index_stmt(self):
            return self.getTypedRuleContext(sqlParser.Drop_index_stmtContext,0)


        def drop_table_stmt(self):
            return self.getTypedRuleContext(sqlParser.Drop_table_stmtContext,0)


        def factored_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Factored_select_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(sqlParser.Insert_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(sqlParser.Rollback_stmtContext,0)


        def simple_select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Simple_select_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(sqlParser.Update_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)




    def sql_stmt(self):

        localctx = sqlParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 170
                self.create_database_stmt()
                pass

            elif la_ == 2:
                self.state = 171
                self.alter_database_stmt()
                pass

            elif la_ == 3:
                self.state = 172
                self.drop_database_stmt()
                pass

            elif la_ == 4:
                self.state = 173
                self.show_databases_stmt()
                pass

            elif la_ == 5:
                self.state = 174
                self.show_tables_stmt()
                pass

            elif la_ == 6:
                self.state = 175
                self.use_database_stmt()
                pass

            elif la_ == 7:
                self.state = 176
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 177
                self.alter_table_stmt()
                pass

            elif la_ == 9:
                self.state = 178
                self.show_columns_stmt()
                pass

            elif la_ == 10:
                self.state = 179
                self.begin_stmt()
                pass

            elif la_ == 11:
                self.state = 180
                self.commit_stmt()
                pass

            elif la_ == 12:
                self.state = 181
                self.compound_select_stmt()
                pass

            elif la_ == 13:
                self.state = 182
                self.create_index_stmt()
                pass

            elif la_ == 14:
                self.state = 183
                self.delete_stmt()
                pass

            elif la_ == 15:
                self.state = 184
                self.drop_index_stmt()
                pass

            elif la_ == 16:
                self.state = 185
                self.drop_table_stmt()
                pass

            elif la_ == 17:
                self.state = 186
                self.factored_select_stmt()
                pass

            elif la_ == 18:
                self.state = 187
                self.insert_stmt()
                pass

            elif la_ == 19:
                self.state = 188
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 189
                self.simple_select_stmt()
                pass

            elif la_ == 21:
                self.state = 190
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 191
                self.update_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_database_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_create_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_database_stmt" ):
                listener.enterCreate_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_database_stmt" ):
                listener.exitCreate_database_stmt(self)




    def create_database_stmt(self):

        localctx = sqlParser.Create_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_create_database_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(sqlParser.K_CREATE)
            self.state = 195
            self.match(sqlParser.K_DATABASE)
            self.state = 196
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_database_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def new_database_name(self):
            return self.getTypedRuleContext(sqlParser.New_database_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_alter_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_database_stmt" ):
                listener.enterAlter_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_database_stmt" ):
                listener.exitAlter_database_stmt(self)




    def alter_database_stmt(self):

        localctx = sqlParser.Alter_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_alter_database_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(sqlParser.K_ALTER)
            self.state = 199
            self.match(sqlParser.K_DATABASE)
            self.state = 200
            self.database_name()
            self.state = 201
            self.match(sqlParser.K_RENAME)
            self.state = 202
            self.match(sqlParser.K_TO)
            self.state = 203
            self.new_database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_database_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_drop_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_database_stmt" ):
                listener.enterDrop_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_database_stmt" ):
                listener.exitDrop_database_stmt(self)




    def drop_database_stmt(self):

        localctx = sqlParser.Drop_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_drop_database_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 205
            self.match(sqlParser.K_DROP)
            self.state = 206
            self.match(sqlParser.K_DATABASE)
            self.state = 207
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_databases_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SHOW(self):
            return self.getToken(sqlParser.K_SHOW, 0)

        def K_DATABASES(self):
            return self.getToken(sqlParser.K_DATABASES, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_show_databases_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_databases_stmt" ):
                listener.enterShow_databases_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_databases_stmt" ):
                listener.exitShow_databases_stmt(self)




    def show_databases_stmt(self):

        localctx = sqlParser.Show_databases_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_show_databases_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(sqlParser.K_SHOW)
            self.state = 210
            self.match(sqlParser.K_DATABASES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_tables_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SHOW(self):
            return self.getToken(sqlParser.K_SHOW, 0)

        def K_TABLES(self):
            return self.getToken(sqlParser.K_TABLES, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_show_tables_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_tables_stmt" ):
                listener.enterShow_tables_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_tables_stmt" ):
                listener.exitShow_tables_stmt(self)




    def show_tables_stmt(self):

        localctx = sqlParser.Show_tables_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_show_tables_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(sqlParser.K_SHOW)
            self.state = 213
            self.match(sqlParser.K_TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Use_database_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_USE(self):
            return self.getToken(sqlParser.K_USE, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def database_name(self):
            return self.getTypedRuleContext(sqlParser.Database_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_use_database_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUse_database_stmt" ):
                listener.enterUse_database_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUse_database_stmt" ):
                listener.exitUse_database_stmt(self)




    def use_database_stmt(self):

        localctx = sqlParser.Use_database_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_use_database_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(sqlParser.K_USE)
            self.state = 216
            self.match(sqlParser.K_DATABASE)
            self.state = 217
            self.database_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Alter_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(sqlParser.New_table_nameContext,0)


        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def column_def(self):
            return self.getTypedRuleContext(sqlParser.Column_defContext,0)


        def table_constraint(self):
            return self.getTypedRuleContext(sqlParser.Table_constraintContext,0)


        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)




    def alter_table_stmt(self):

        localctx = sqlParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(sqlParser.K_ALTER)
            self.state = 220
            self.match(sqlParser.K_TABLE)
            self.state = 221
            self.table_name()
            self.state = 236
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 222
                self.match(sqlParser.K_RENAME)
                self.state = 223
                self.match(sqlParser.K_TO)
                self.state = 224
                self.new_table_name()
                pass

            elif la_ == 2:
                self.state = 225
                self.match(sqlParser.K_ADD)
                self.state = 226
                self.match(sqlParser.K_COLUMN)
                self.state = 227
                self.column_def()
                pass

            elif la_ == 3:
                self.state = 228
                self.match(sqlParser.K_ADD)
                self.state = 229
                self.table_constraint()
                pass

            elif la_ == 4:
                self.state = 230
                self.match(sqlParser.K_DROP)
                self.state = 231
                self.match(sqlParser.K_COLUMN)
                self.state = 232
                self.column_name()
                pass

            elif la_ == 5:
                self.state = 233
                self.match(sqlParser.K_DROP)
                self.state = 234
                self.match(sqlParser.K_CONSTRAINT)
                self.state = 235
                self.name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_columns_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SHOW(self):
            return self.getToken(sqlParser.K_SHOW, 0)

        def K_COLUMNS(self):
            return self.getToken(sqlParser.K_COLUMNS, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_show_columns_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShow_columns_stmt" ):
                listener.enterShow_columns_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShow_columns_stmt" ):
                listener.exitShow_columns_stmt(self)




    def show_columns_stmt(self):

        localctx = sqlParser.Show_columns_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_show_columns_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(sqlParser.K_SHOW)
            self.state = 239
            self.match(sqlParser.K_COLUMNS)
            self.state = 240
            self.match(sqlParser.K_FROM)
            self.state = 241
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Begin_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(sqlParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)




    def begin_stmt(self):

        localctx = sqlParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(sqlParser.K_BEGIN)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TRANSACTION:
                self.state = 244
                self.match(sqlParser.K_TRANSACTION)
                self.state = 246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 245
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Commit_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(sqlParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)




    def commit_stmt(self):

        localctx = sqlParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(sqlParser.K_COMMIT)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_TRANSACTION:
                self.state = 251
                self.match(sqlParser.K_TRANSACTION)
                self.state = 253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                if la_ == 1:
                    self.state = 252
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_UNION(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_UNION)
            else:
                return self.getToken(sqlParser.K_UNION, i)

        def K_INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_INTERSECT)
            else:
                return self.getToken(sqlParser.K_INTERSECT, i)

        def K_EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(sqlParser.K_EXCEPT)
            else:
                return self.getToken(sqlParser.K_EXCEPT, i)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)




    def compound_select_stmt(self):

        localctx = sqlParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 257
            self.select_core()
            self.state = 260 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 258
                _la = self._input.LA(1)
                if not(((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (sqlParser.K_EXCEPT - 45)) | (1 << (sqlParser.K_INTERSECT - 45)) | (1 << (sqlParser.K_UNION - 45)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 259
                self.select_core()
                self.state = 262 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (sqlParser.K_EXCEPT - 45)) | (1 << (sqlParser.K_INTERSECT - 45)) | (1 << (sqlParser.K_UNION - 45)))) != 0)):
                    break

            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 264
                self.match(sqlParser.K_ORDER)
                self.state = 265
                self.match(sqlParser.K_BY)
                self.state = 266
                self.ordering_term()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 267
                    self.match(sqlParser.COMMA)
                    self.state = 268
                    self.ordering_term()
                    self.state = 273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 276
                self.match(sqlParser.K_LIMIT)
                self.state = 277
                self.expr(0)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 278
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 279
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)




    def create_index_stmt(self):

        localctx = sqlParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 284
            self.match(sqlParser.K_CREATE)
            self.state = 285
            self.match(sqlParser.K_INDEX)
            self.state = 286
            self.index_name()
            self.state = 287
            self.match(sqlParser.K_ON)
            self.state = 288
            self.table_name()
            self.state = 289
            self.match(sqlParser.OPEN_PAR)
            self.state = 290
            self.column_name()
            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 291
                self.match(sqlParser.COMMA)
                self.state = 292
                self.column_name()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 298
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Create_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_defContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_defContext,i)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)




    def create_table_stmt(self):

        localctx = sqlParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(sqlParser.K_CREATE)
            self.state = 301
            self.match(sqlParser.K_TABLE)
            self.state = 302
            self.table_name()
            self.state = 323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.OPEN_PAR]:
                self.state = 303
                self.match(sqlParser.OPEN_PAR)
                self.state = 304
                self.column_def()
                self.state = 309
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 305
                        self.match(sqlParser.COMMA)
                        self.state = 306
                        self.column_def() 
                    self.state = 311
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 312
                    self.match(sqlParser.COMMA)
                    self.state = 313
                    self.table_constraint()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 319
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_AS]:
                self.state = 321
                self.match(sqlParser.K_AS)
                self.state = 322
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Delete_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)




    def delete_stmt(self):

        localctx = sqlParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(sqlParser.K_DELETE)
            self.state = 326
            self.match(sqlParser.K_FROM)
            self.state = 327
            self.table_name()
            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 328
                self.match(sqlParser.K_WHERE)
                self.state = 329
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_index_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(sqlParser.Index_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_drop_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_index_stmt" ):
                listener.enterDrop_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_index_stmt" ):
                listener.exitDrop_index_stmt(self)




    def drop_index_stmt(self):

        localctx = sqlParser.Drop_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_drop_index_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(sqlParser.K_DROP)
            self.state = 333
            self.match(sqlParser.K_INDEX)
            self.state = 334
            self.index_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Drop_table_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_drop_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_table_stmt" ):
                listener.enterDrop_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_table_stmt" ):
                listener.exitDrop_table_stmt(self)




    def drop_table_stmt(self):

        localctx = sqlParser.Drop_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_drop_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(sqlParser.K_DROP)
            self.state = 337
            self.match(sqlParser.K_TABLE)
            self.state = 338
            self.table_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Factored_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_coreContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)




    def factored_select_stmt(self):

        localctx = sqlParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_factored_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.select_core()
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (sqlParser.K_EXCEPT - 45)) | (1 << (sqlParser.K_INTERSECT - 45)) | (1 << (sqlParser.K_UNION - 45)))) != 0):
                self.state = 341
                self.compound_operator()
                self.state = 342
                self.select_core()
                self.state = 348
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 349
                self.match(sqlParser.K_ORDER)
                self.state = 350
                self.match(sqlParser.K_BY)
                self.state = 351
                self.ordering_term()
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 352
                    self.match(sqlParser.COMMA)
                    self.state = 353
                    self.ordering_term()
                    self.state = 358
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 361
                self.match(sqlParser.K_LIMIT)
                self.state = 362
                self.expr(0)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 363
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 364
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Insert_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)




    def insert_stmt(self):

        localctx = sqlParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(sqlParser.K_INSERT)
            self.state = 370
            self.match(sqlParser.K_INTO)
            self.state = 371
            self.table_name()
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 372
                self.match(sqlParser.OPEN_PAR)
                self.state = 373
                self.column_name()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 374
                    self.match(sqlParser.COMMA)
                    self.state = 375
                    self.column_name()
                    self.state = 380
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 381
                self.match(sqlParser.CLOSE_PAR)


            self.state = 385
            self.match(sqlParser.K_VALUES)
            self.state = 386
            self.match(sqlParser.OPEN_PAR)
            self.state = 387
            self.expr(0)
            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 388
                self.match(sqlParser.COMMA)
                self.state = 389
                self.expr(0)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 395
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Rollback_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)




    def rollback_stmt(self):

        localctx = sqlParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_rollback_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 397
            self.match(sqlParser.K_ROLLBACK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Simple_select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(sqlParser.Select_coreContext,0)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)




    def simple_select_stmt(self):

        localctx = sqlParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.select_core()
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 400
                self.match(sqlParser.K_ORDER)
                self.state = 401
                self.match(sqlParser.K_BY)
                self.state = 402
                self.ordering_term()
                self.state = 407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 403
                    self.match(sqlParser.COMMA)
                    self.state = 404
                    self.ordering_term()
                    self.state = 409
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 412
                self.match(sqlParser.K_LIMIT)
                self.state = 413
                self.expr(0)
                self.state = 416
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 414
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 415
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_or_values(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Select_or_valuesContext)
            else:
                return self.getTypedRuleContext(sqlParser.Select_or_valuesContext,i)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Compound_operatorContext,i)


        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(sqlParser.Ordering_termContext,i)


        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)




    def select_stmt(self):

        localctx = sqlParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 420
            self.select_or_values()
            self.state = 426
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (sqlParser.K_EXCEPT - 45)) | (1 << (sqlParser.K_INTERSECT - 45)) | (1 << (sqlParser.K_UNION - 45)))) != 0):
                self.state = 421
                self.compound_operator()
                self.state = 422
                self.select_or_values()
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ORDER:
                self.state = 429
                self.match(sqlParser.K_ORDER)
                self.state = 430
                self.match(sqlParser.K_BY)
                self.state = 431
                self.ordering_term()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 432
                    self.match(sqlParser.COMMA)
                    self.state = 433
                    self.ordering_term()
                    self.state = 438
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 447
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_LIMIT:
                self.state = 441
                self.match(sqlParser.K_LIMIT)
                self.state = 442
                self.expr(0)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.COMMA or _la==sqlParser.K_OFFSET:
                    self.state = 443
                    _la = self._input.LA(1)
                    if not(_la==sqlParser.COMMA or _la==sqlParser.K_OFFSET):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 444
                    self.expr(0)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_or_valuesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_or_values

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_or_values" ):
                listener.enterSelect_or_values(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_or_values" ):
                listener.exitSelect_or_values(self)




    def select_or_values(self):

        localctx = sqlParser.Select_or_valuesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_select_or_values)
        self._la = 0 # Token type
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 449
                self.match(sqlParser.K_SELECT)
                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.match(sqlParser.K_DISTINCT)


                self.state = 453
                self.result_column()
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 454
                    self.match(sqlParser.COMMA)
                    self.state = 455
                    self.result_column()
                    self.state = 460
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 461
                    self.match(sqlParser.K_FROM)
                    self.state = 471
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        self.state = 462
                        self.table_or_subquery()
                        self.state = 467
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 463
                            self.match(sqlParser.COMMA)
                            self.state = 464
                            self.table_or_subquery()
                            self.state = 469
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 470
                        self.join_clause()
                        pass




                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 475
                    self.match(sqlParser.K_WHERE)
                    self.state = 476
                    self.expr(0)


                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 479
                    self.match(sqlParser.K_GROUP)
                    self.state = 480
                    self.match(sqlParser.K_BY)
                    self.state = 481
                    self.expr(0)
                    self.state = 486
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 482
                        self.match(sqlParser.COMMA)
                        self.state = 483
                        self.expr(0)
                        self.state = 488
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 491
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 489
                        self.match(sqlParser.K_HAVING)
                        self.state = 490
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 495
                self.match(sqlParser.K_VALUES)
                self.state = 496
                self.match(sqlParser.OPEN_PAR)
                self.state = 497
                self.expr(0)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 498
                    self.match(sqlParser.COMMA)
                    self.state = 499
                    self.expr(0)
                    self.state = 504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 505
                self.match(sqlParser.CLOSE_PAR)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 506
                    self.match(sqlParser.COMMA)
                    self.state = 507
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 508
                    self.expr(0)
                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 509
                        self.match(sqlParser.COMMA)
                        self.state = 510
                        self.expr(0)
                        self.state = 515
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 516
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 522
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Update_stmtContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)




    def update_stmt(self):

        localctx = sqlParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(sqlParser.K_UPDATE)
            self.state = 526
            self.table_name()
            self.state = 527
            self.match(sqlParser.K_SET)
            self.state = 528
            self.column_name()
            self.state = 529
            self.match(sqlParser.ASSIGN)
            self.state = 530
            self.expr(0)
            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.COMMA:
                self.state = 531
                self.match(sqlParser.COMMA)
                self.state = 532
                self.column_name()
                self.state = 533
                self.match(sqlParser.ASSIGN)
                self.state = 534
                self.expr(0)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_WHERE:
                self.state = 541
                self.match(sqlParser.K_WHERE)
                self.state = 542
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_defContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(sqlParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)




    def column_def(self):

        localctx = sqlParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_column_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.column_name()
            self.state = 546
            self.type_name()
            self.state = 550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==sqlParser.K_DEFAULT:
                self.state = 547
                self.column_constraint()
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Type_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.NameContext)
            else:
                return self.getTypedRuleContext(sqlParser.NameContext,i)


        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(sqlParser.Signed_numberContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)




    def type_name(self):

        localctx = sqlParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 554 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 553
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 556 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 568
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.state = 558
                self.match(sqlParser.OPEN_PAR)
                self.state = 559
                self.signed_number()
                self.state = 560
                self.match(sqlParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 562
                self.match(sqlParser.OPEN_PAR)
                self.state = 563
                self.signed_number()
                self.state = 564
                self.match(sqlParser.COMMA)
                self.state = 565
                self.signed_number()
                self.state = 566
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def signed_number(self):
            return self.getTypedRuleContext(sqlParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)




    def column_constraint(self):

        localctx = sqlParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_column_constraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 570
            self.match(sqlParser.K_DEFAULT)
            self.state = 577
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 571
                self.signed_number()
                pass

            elif la_ == 2:
                self.state = 572
                self.literal_value()
                pass

            elif la_ == 3:
                self.state = 573
                self.match(sqlParser.OPEN_PAR)
                self.state = 574
                self.expr(0)
                self.state = 575
                self.match(sqlParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(sqlParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(sqlParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(sqlParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(sqlParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(sqlParser.Function_nameContext,0)


        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_MATCH(self):
            return self.getToken(sqlParser.K_MATCH, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = sqlParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 60
        self.enterRecursionRule(localctx, 60, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 580
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 581
                self.match(sqlParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 585
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 582
                    self.table_name()
                    self.state = 583
                    self.match(sqlParser.DOT)


                self.state = 587
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 588
                self.unary_operator()
                self.state = 589
                self.expr(17)
                pass

            elif la_ == 5:
                self.state = 591
                self.function_name()
                self.state = 592
                self.match(sqlParser.OPEN_PAR)
                self.state = 605
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.OPEN_PAR, sqlParser.PLUS, sqlParser.MINUS, sqlParser.TILDE, sqlParser.K_ADD, sqlParser.K_ALTER, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_BEGIN, sqlParser.K_BY, sqlParser.K_CHECK, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_DATABASE, sqlParser.K_DATABASES, sqlParser.K_DEFAULT, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EXCEPT, sqlParser.K_EXISTS, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IGNORE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_NOT, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_PRIMARY, sqlParser.K_REFERENCES, sqlParser.K_RENAME, sqlParser.K_ROLLBACK, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_SHOW, sqlParser.K_TABLE, sqlParser.K_TABLES, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USE, sqlParser.K_VALUES, sqlParser.K_WHERE, sqlParser.IDENTIFIER, sqlParser.NUMERIC_LITERAL, sqlParser.BIND_PARAMETER, sqlParser.STRING_LITERAL, sqlParser.BLOB_LITERAL]:
                    self.state = 594
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
                    if la_ == 1:
                        self.state = 593
                        self.match(sqlParser.K_DISTINCT)


                    self.state = 596
                    self.expr(0)
                    self.state = 601
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 597
                        self.match(sqlParser.COMMA)
                        self.state = 598
                        self.expr(0)
                        self.state = 603
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [sqlParser.STAR]:
                    self.state = 604
                    self.match(sqlParser.STAR)
                    pass
                elif token in [sqlParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 607
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 6:
                self.state = 609
                self.match(sqlParser.K_NOT)
                self.state = 610
                self.expr(7)
                pass

            elif la_ == 7:
                self.state = 611
                self.match(sqlParser.OPEN_PAR)
                self.state = 612
                self.expr(0)
                self.state = 613
                self.match(sqlParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_EXISTS or _la==sqlParser.K_NOT:
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_NOT:
                        self.state = 615
                        self.match(sqlParser.K_NOT)


                    self.state = 618
                    self.match(sqlParser.K_EXISTS)


                self.state = 621
                self.match(sqlParser.OPEN_PAR)
                self.state = 622
                self.select_stmt()
                self.state = 623
                self.match(sqlParser.CLOSE_PAR)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 700
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 698
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
                    if la_ == 1:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 627
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 628
                        self.match(sqlParser.PIPE2)
                        self.state = 629
                        self.expr(17)
                        pass

                    elif la_ == 2:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 630
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 631
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.STAR) | (1 << sqlParser.DIV) | (1 << sqlParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 632
                        self.expr(16)
                        pass

                    elif la_ == 3:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 633
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 634
                        _la = self._input.LA(1)
                        if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 635
                        self.expr(15)
                        pass

                    elif la_ == 4:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 636
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 637
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT2) | (1 << sqlParser.GT2) | (1 << sqlParser.AMP) | (1 << sqlParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 638
                        self.expr(14)
                        pass

                    elif la_ == 5:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 639
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 640
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.LT) | (1 << sqlParser.LT_EQ) | (1 << sqlParser.GT) | (1 << sqlParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 641
                        self.expr(13)
                        pass

                    elif la_ == 6:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 642
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 653
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                        if la_ == 1:
                            self.state = 643
                            self.match(sqlParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 644
                            self.match(sqlParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 645
                            self.match(sqlParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 646
                            self.match(sqlParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 647
                            self.match(sqlParser.K_IS)
                            pass

                        elif la_ == 6:
                            self.state = 648
                            self.match(sqlParser.K_IS)
                            self.state = 649
                            self.match(sqlParser.K_NOT)
                            pass

                        elif la_ == 7:
                            self.state = 650
                            self.match(sqlParser.K_IN)
                            pass

                        elif la_ == 8:
                            self.state = 651
                            self.match(sqlParser.K_LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 652
                            self.match(sqlParser.K_MATCH)
                            pass


                        self.state = 655
                        self.expr(12)
                        pass

                    elif la_ == 7:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 656
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 657
                        self.match(sqlParser.K_AND)
                        self.state = 658
                        self.expr(11)
                        pass

                    elif la_ == 8:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 659
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 660
                        self.match(sqlParser.K_OR)
                        self.state = 661
                        self.expr(10)
                        pass

                    elif la_ == 9:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 662
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 664
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 663
                            self.match(sqlParser.K_NOT)


                        self.state = 666
                        self.match(sqlParser.K_LIKE)
                        self.state = 667
                        self.expr(6)
                        pass

                    elif la_ == 10:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 668
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 669
                        self.match(sqlParser.K_IS)
                        self.state = 671
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                        if la_ == 1:
                            self.state = 670
                            self.match(sqlParser.K_NOT)


                        self.state = 673
                        self.expr(4)
                        pass

                    elif la_ == 11:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 674
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")

                        self.state = 675
                        self.match(sqlParser.K_NOT)
                        self.state = 676
                        self.match(sqlParser.K_NULL)
                        pass

                    elif la_ == 12:
                        localctx = sqlParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 677
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 679
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==sqlParser.K_NOT:
                            self.state = 678
                            self.match(sqlParser.K_NOT)


                        self.state = 681
                        self.match(sqlParser.K_IN)
                        self.state = 696
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                        if la_ == 1:
                            self.state = 682
                            self.match(sqlParser.OPEN_PAR)
                            self.state = 692
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                            if la_ == 1:
                                self.state = 683
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 684
                                self.expr(0)
                                self.state = 689
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==sqlParser.COMMA:
                                    self.state = 685
                                    self.match(sqlParser.COMMA)
                                    self.state = 686
                                    self.expr(0)
                                    self.state = 691
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 694
                            self.match(sqlParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 695
                            self.table_name()
                            pass


                        pass

             
                self.state = 702
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class Foreign_key_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(sqlParser.Foreign_tableContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)




    def foreign_key_clause(self):

        localctx = sqlParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 703
            self.match(sqlParser.K_REFERENCES)
            self.state = 704
            self.foreign_table()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 705
                self.match(sqlParser.OPEN_PAR)
                self.state = 706
                self.column_name()
                self.state = 711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 707
                    self.match(sqlParser.COMMA)
                    self.state = 708
                    self.column_name()
                    self.state = 713
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 714
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(sqlParser.NameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def foreign_key_clause(self):
            return self.getTypedRuleContext(sqlParser.Foreign_key_clauseContext,0)


        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)




    def table_constraint(self):

        localctx = sqlParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(sqlParser.K_CONSTRAINT)
            self.state = 719
            self.name()
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_PRIMARY, sqlParser.K_UNIQUE]:
                self.state = 723
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [sqlParser.K_PRIMARY]:
                    self.state = 720
                    self.match(sqlParser.K_PRIMARY)
                    self.state = 721
                    self.match(sqlParser.K_KEY)
                    pass
                elif token in [sqlParser.K_UNIQUE]:
                    self.state = 722
                    self.match(sqlParser.K_UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 725
                self.match(sqlParser.OPEN_PAR)
                self.state = 726
                self.column_name()
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 727
                    self.match(sqlParser.COMMA)
                    self.state = 728
                    self.column_name()
                    self.state = 733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 734
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_CHECK]:
                self.state = 736
                self.match(sqlParser.K_CHECK)
                self.state = 737
                self.match(sqlParser.OPEN_PAR)
                self.state = 738
                self.expr(0)
                self.state = 739
                self.match(sqlParser.CLOSE_PAR)
                pass
            elif token in [sqlParser.K_FOREIGN]:
                self.state = 741
                self.match(sqlParser.K_FOREIGN)
                self.state = 742
                self.match(sqlParser.K_KEY)
                self.state = 743
                self.match(sqlParser.OPEN_PAR)
                self.state = 744
                self.column_name()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 745
                    self.match(sqlParser.COMMA)
                    self.state = 746
                    self.column_name()
                    self.state = 751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 752
                self.match(sqlParser.CLOSE_PAR)
                self.state = 753
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Ordering_termContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)




    def ordering_term(self):

        localctx = sqlParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.expr(0)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ASC or _la==sqlParser.K_DESC:
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_ASC or _la==sqlParser.K_DESC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Common_table_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)




    def common_table_expression(self):

        localctx = sqlParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 761
            self.table_name()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 762
                self.match(sqlParser.OPEN_PAR)
                self.state = 763
                self.column_name()
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 764
                    self.match(sqlParser.COMMA)
                    self.state = 765
                    self.column_name()
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 771
                self.match(sqlParser.CLOSE_PAR)


            self.state = 775
            self.match(sqlParser.K_AS)
            self.state = 776
            self.match(sqlParser.OPEN_PAR)
            self.state = 777
            self.select_stmt()
            self.state = 778
            self.match(sqlParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Result_columnContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(sqlParser.Column_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)




    def result_column(self):

        localctx = sqlParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 792
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self.match(sqlParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 781
                self.table_name()
                self.state = 782
                self.match(sqlParser.DOT)
                self.state = 783
                self.match(sqlParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.expr(0)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_AS or _la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL:
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_AS:
                        self.state = 786
                        self.match(sqlParser.K_AS)


                    self.state = 789
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_subqueryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def table_alias(self):
            return self.getTypedRuleContext(sqlParser.Table_aliasContext,0)


        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(sqlParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)




    def table_or_subquery(self):

        localctx = sqlParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 829
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 794
                self.table_name()
                self.state = 799
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 796
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 795
                        self.match(sqlParser.K_AS)


                    self.state = 798
                    self.table_alias()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.match(sqlParser.OPEN_PAR)
                self.state = 811
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                if la_ == 1:
                    self.state = 802
                    self.table_or_subquery()
                    self.state = 807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 803
                        self.match(sqlParser.COMMA)
                        self.state = 804
                        self.table_or_subquery()
                        self.state = 809
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 810
                    self.join_clause()
                    pass


                self.state = 813
                self.match(sqlParser.CLOSE_PAR)
                self.state = 818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 815
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        self.state = 814
                        self.match(sqlParser.K_AS)


                    self.state = 817
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.match(sqlParser.OPEN_PAR)
                self.state = 821
                self.select_stmt()
                self.state = 822
                self.match(sqlParser.CLOSE_PAR)
                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 824
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 823
                        self.match(sqlParser.K_AS)


                    self.state = 826
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_clauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(sqlParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)




    def join_clause(self):

        localctx = sqlParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.table_or_subquery()
            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.COMMA) | (1 << sqlParser.K_INNER) | (1 << sqlParser.K_LEFT))) != 0):
                self.state = 832
                self.join_operator()
                self.state = 833
                self.table_or_subquery()
                self.state = 834
                self.join_constraint()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)




    def join_operator(self):

        localctx = sqlParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 844
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.match(sqlParser.COMMA)
                pass
            elif token in [sqlParser.K_INNER, sqlParser.K_LEFT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 842
                _la = self._input.LA(1)
                if not(_la==sqlParser.K_INNER or _la==sqlParser.K_LEFT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 843
                self.match(sqlParser.K_JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Join_constraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)




    def join_constraint(self):

        localctx = sqlParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.K_ON:
                self.state = 846
                self.match(sqlParser.K_ON)
                self.state = 847
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Select_coreContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(sqlParser.Result_columnContext,i)


        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.ExprContext)
            else:
                return self.getTypedRuleContext(sqlParser.ExprContext,i)


        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(sqlParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(sqlParser.Join_clauseContext,0)


        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)




    def select_core(self):

        localctx = sqlParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.K_SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 850
                self.match(sqlParser.K_SELECT)
                self.state = 852
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 851
                    self.match(sqlParser.K_DISTINCT)


                self.state = 854
                self.result_column()
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 855
                    self.match(sqlParser.COMMA)
                    self.state = 856
                    self.result_column()
                    self.state = 861
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_FROM:
                    self.state = 862
                    self.match(sqlParser.K_FROM)
                    self.state = 872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        self.state = 863
                        self.table_or_subquery()
                        self.state = 868
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==sqlParser.COMMA:
                            self.state = 864
                            self.match(sqlParser.COMMA)
                            self.state = 865
                            self.table_or_subquery()
                            self.state = 870
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 871
                        self.join_clause()
                        pass




                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_WHERE:
                    self.state = 876
                    self.match(sqlParser.K_WHERE)
                    self.state = 877
                    self.expr(0)


                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==sqlParser.K_GROUP:
                    self.state = 880
                    self.match(sqlParser.K_GROUP)
                    self.state = 881
                    self.match(sqlParser.K_BY)
                    self.state = 882
                    self.expr(0)
                    self.state = 887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 883
                        self.match(sqlParser.COMMA)
                        self.state = 884
                        self.expr(0)
                        self.state = 889
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==sqlParser.K_HAVING:
                        self.state = 890
                        self.match(sqlParser.K_HAVING)
                        self.state = 891
                        self.expr(0)




                pass
            elif token in [sqlParser.K_VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 896
                self.match(sqlParser.K_VALUES)
                self.state = 897
                self.match(sqlParser.OPEN_PAR)
                self.state = 898
                self.expr(0)
                self.state = 903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 899
                    self.match(sqlParser.COMMA)
                    self.state = 900
                    self.expr(0)
                    self.state = 905
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 906
                self.match(sqlParser.CLOSE_PAR)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 907
                    self.match(sqlParser.COMMA)
                    self.state = 908
                    self.match(sqlParser.OPEN_PAR)
                    self.state = 909
                    self.expr(0)
                    self.state = 914
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==sqlParser.COMMA:
                        self.state = 910
                        self.match(sqlParser.COMMA)
                        self.state = 911
                        self.expr(0)
                        self.state = 916
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 917
                    self.match(sqlParser.CLOSE_PAR)
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compound_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)




    def compound_operator(self):

        localctx = sqlParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            _la = self._input.LA(1)
            if not(((((_la - 45)) & ~0x3f) == 0 and ((1 << (_la - 45)) & ((1 << (sqlParser.K_EXCEPT - 45)) | (1 << (sqlParser.K_INTERSECT - 45)) | (1 << (sqlParser.K_UNION - 45)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Cte_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(sqlParser.Table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(sqlParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(sqlParser.Column_nameContext,i)


        def getRuleIndex(self):
            return sqlParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)




    def cte_table_name(self):

        localctx = sqlParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.table_name()
            self.state = 940
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.OPEN_PAR:
                self.state = 929
                self.match(sqlParser.OPEN_PAR)
                self.state = 930
                self.column_name()
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==sqlParser.COMMA:
                    self.state = 931
                    self.match(sqlParser.COMMA)
                    self.state = 932
                    self.column_name()
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 938
                self.match(sqlParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Signed_numberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)




    def signed_number(self):

        localctx = sqlParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==sqlParser.PLUS or _la==sqlParser.MINUS:
                self.state = 942
                _la = self._input.LA(1)
                if not(_la==sqlParser.PLUS or _la==sqlParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 945
            self.match(sqlParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Literal_valueContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(sqlParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(sqlParser.BLOB_LITERAL, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)




    def literal_value(self):

        localctx = sqlParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (sqlParser.K_NULL - 70)) | (1 << (sqlParser.NUMERIC_LITERAL - 70)) | (1 << (sqlParser.STRING_LITERAL - 70)) | (1 << (sqlParser.BLOB_LITERAL - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Unary_operatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)




    def unary_operator(self):

        localctx = sqlParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            _la = self._input.LA(1)
            if not(((((_la - 8)) & ~0x3f) == 0 and ((1 << (_la - 8)) & ((1 << (sqlParser.PLUS - 8)) | (1 << (sqlParser.MINUS - 8)) | (1 << (sqlParser.TILDE - 8)) | (1 << (sqlParser.K_NOT - 8)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Error_messageContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)




    def error_message(self):

        localctx = sqlParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 951
            self.match(sqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_argumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(sqlParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(sqlParser.Column_defContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)




    def module_argument(self):

        localctx = sqlParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_module_argument)
        try:
            self.state = 955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 953
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)




    def column_alias(self):

        localctx = sqlParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            _la = self._input.LA(1)
            if not(_la==sqlParser.IDENTIFIER or _la==sqlParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class KeywordContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def K_ADD(self):
            return self.getToken(sqlParser.K_ADD, 0)

        def K_ALTER(self):
            return self.getToken(sqlParser.K_ALTER, 0)

        def K_AND(self):
            return self.getToken(sqlParser.K_AND, 0)

        def K_AS(self):
            return self.getToken(sqlParser.K_AS, 0)

        def K_ASC(self):
            return self.getToken(sqlParser.K_ASC, 0)

        def K_BEGIN(self):
            return self.getToken(sqlParser.K_BEGIN, 0)

        def K_BY(self):
            return self.getToken(sqlParser.K_BY, 0)

        def K_CHECK(self):
            return self.getToken(sqlParser.K_CHECK, 0)

        def K_COLUMN(self):
            return self.getToken(sqlParser.K_COLUMN, 0)

        def K_COMMIT(self):
            return self.getToken(sqlParser.K_COMMIT, 0)

        def K_CONSTRAINT(self):
            return self.getToken(sqlParser.K_CONSTRAINT, 0)

        def K_CREATE(self):
            return self.getToken(sqlParser.K_CREATE, 0)

        def K_DATABASE(self):
            return self.getToken(sqlParser.K_DATABASE, 0)

        def K_DATABASES(self):
            return self.getToken(sqlParser.K_DATABASES, 0)

        def K_DEFAULT(self):
            return self.getToken(sqlParser.K_DEFAULT, 0)

        def K_DELETE(self):
            return self.getToken(sqlParser.K_DELETE, 0)

        def K_DESC(self):
            return self.getToken(sqlParser.K_DESC, 0)

        def K_DISTINCT(self):
            return self.getToken(sqlParser.K_DISTINCT, 0)

        def K_DROP(self):
            return self.getToken(sqlParser.K_DROP, 0)

        def K_EXCEPT(self):
            return self.getToken(sqlParser.K_EXCEPT, 0)

        def K_EXISTS(self):
            return self.getToken(sqlParser.K_EXISTS, 0)

        def K_FOR(self):
            return self.getToken(sqlParser.K_FOR, 0)

        def K_FOREIGN(self):
            return self.getToken(sqlParser.K_FOREIGN, 0)

        def K_FROM(self):
            return self.getToken(sqlParser.K_FROM, 0)

        def K_FULL(self):
            return self.getToken(sqlParser.K_FULL, 0)

        def K_GROUP(self):
            return self.getToken(sqlParser.K_GROUP, 0)

        def K_HAVING(self):
            return self.getToken(sqlParser.K_HAVING, 0)

        def K_IGNORE(self):
            return self.getToken(sqlParser.K_IGNORE, 0)

        def K_IN(self):
            return self.getToken(sqlParser.K_IN, 0)

        def K_INDEX(self):
            return self.getToken(sqlParser.K_INDEX, 0)

        def K_INNER(self):
            return self.getToken(sqlParser.K_INNER, 0)

        def K_INSERT(self):
            return self.getToken(sqlParser.K_INSERT, 0)

        def K_INTERSECT(self):
            return self.getToken(sqlParser.K_INTERSECT, 0)

        def K_INTO(self):
            return self.getToken(sqlParser.K_INTO, 0)

        def K_IS(self):
            return self.getToken(sqlParser.K_IS, 0)

        def K_JOIN(self):
            return self.getToken(sqlParser.K_JOIN, 0)

        def K_KEY(self):
            return self.getToken(sqlParser.K_KEY, 0)

        def K_LEFT(self):
            return self.getToken(sqlParser.K_LEFT, 0)

        def K_LIKE(self):
            return self.getToken(sqlParser.K_LIKE, 0)

        def K_LIMIT(self):
            return self.getToken(sqlParser.K_LIMIT, 0)

        def K_NOT(self):
            return self.getToken(sqlParser.K_NOT, 0)

        def K_NULL(self):
            return self.getToken(sqlParser.K_NULL, 0)

        def K_OF(self):
            return self.getToken(sqlParser.K_OF, 0)

        def K_OFFSET(self):
            return self.getToken(sqlParser.K_OFFSET, 0)

        def K_ON(self):
            return self.getToken(sqlParser.K_ON, 0)

        def K_OR(self):
            return self.getToken(sqlParser.K_OR, 0)

        def K_ORDER(self):
            return self.getToken(sqlParser.K_ORDER, 0)

        def K_PRIMARY(self):
            return self.getToken(sqlParser.K_PRIMARY, 0)

        def K_REFERENCES(self):
            return self.getToken(sqlParser.K_REFERENCES, 0)

        def K_RENAME(self):
            return self.getToken(sqlParser.K_RENAME, 0)

        def K_ROLLBACK(self):
            return self.getToken(sqlParser.K_ROLLBACK, 0)

        def K_SELECT(self):
            return self.getToken(sqlParser.K_SELECT, 0)

        def K_SET(self):
            return self.getToken(sqlParser.K_SET, 0)

        def K_SHOW(self):
            return self.getToken(sqlParser.K_SHOW, 0)

        def K_TABLE(self):
            return self.getToken(sqlParser.K_TABLE, 0)

        def K_TABLES(self):
            return self.getToken(sqlParser.K_TABLES, 0)

        def K_THEN(self):
            return self.getToken(sqlParser.K_THEN, 0)

        def K_TO(self):
            return self.getToken(sqlParser.K_TO, 0)

        def K_TRANSACTION(self):
            return self.getToken(sqlParser.K_TRANSACTION, 0)

        def K_USE(self):
            return self.getToken(sqlParser.K_USE, 0)

        def K_UNION(self):
            return self.getToken(sqlParser.K_UNION, 0)

        def K_UNIQUE(self):
            return self.getToken(sqlParser.K_UNIQUE, 0)

        def K_UPDATE(self):
            return self.getToken(sqlParser.K_UPDATE, 0)

        def K_VALUES(self):
            return self.getToken(sqlParser.K_VALUES, 0)

        def K_WHERE(self):
            return self.getToken(sqlParser.K_WHERE, 0)

        def getRuleIndex(self):
            return sqlParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)




    def keyword(self):

        localctx = sqlParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 959
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << sqlParser.K_ADD) | (1 << sqlParser.K_ALTER) | (1 << sqlParser.K_AND) | (1 << sqlParser.K_AS) | (1 << sqlParser.K_ASC) | (1 << sqlParser.K_BEGIN) | (1 << sqlParser.K_BY) | (1 << sqlParser.K_CHECK) | (1 << sqlParser.K_COLUMN) | (1 << sqlParser.K_COMMIT) | (1 << sqlParser.K_CONSTRAINT) | (1 << sqlParser.K_CREATE) | (1 << sqlParser.K_DATABASE) | (1 << sqlParser.K_DATABASES) | (1 << sqlParser.K_DEFAULT) | (1 << sqlParser.K_DELETE) | (1 << sqlParser.K_DESC) | (1 << sqlParser.K_DISTINCT) | (1 << sqlParser.K_DROP) | (1 << sqlParser.K_EXCEPT) | (1 << sqlParser.K_EXISTS) | (1 << sqlParser.K_FOR) | (1 << sqlParser.K_FOREIGN) | (1 << sqlParser.K_FROM) | (1 << sqlParser.K_FULL) | (1 << sqlParser.K_GROUP) | (1 << sqlParser.K_HAVING) | (1 << sqlParser.K_IGNORE) | (1 << sqlParser.K_IN) | (1 << sqlParser.K_INDEX) | (1 << sqlParser.K_INNER) | (1 << sqlParser.K_INSERT) | (1 << sqlParser.K_INTERSECT) | (1 << sqlParser.K_INTO) | (1 << sqlParser.K_IS) | (1 << sqlParser.K_JOIN) | (1 << sqlParser.K_KEY) | (1 << sqlParser.K_LEFT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (sqlParser.K_LIKE - 64)) | (1 << (sqlParser.K_LIMIT - 64)) | (1 << (sqlParser.K_NOT - 64)) | (1 << (sqlParser.K_NULL - 64)) | (1 << (sqlParser.K_OF - 64)) | (1 << (sqlParser.K_OFFSET - 64)) | (1 << (sqlParser.K_ON - 64)) | (1 << (sqlParser.K_OR - 64)) | (1 << (sqlParser.K_ORDER - 64)) | (1 << (sqlParser.K_PRIMARY - 64)) | (1 << (sqlParser.K_REFERENCES - 64)) | (1 << (sqlParser.K_RENAME - 64)) | (1 << (sqlParser.K_ROLLBACK - 64)) | (1 << (sqlParser.K_SELECT - 64)) | (1 << (sqlParser.K_SET - 64)) | (1 << (sqlParser.K_SHOW - 64)) | (1 << (sqlParser.K_TABLE - 64)) | (1 << (sqlParser.K_TABLES - 64)) | (1 << (sqlParser.K_THEN - 64)) | (1 << (sqlParser.K_TO - 64)) | (1 << (sqlParser.K_TRANSACTION - 64)) | (1 << (sqlParser.K_UNION - 64)) | (1 << (sqlParser.K_UNIQUE - 64)) | (1 << (sqlParser.K_UPDATE - 64)) | (1 << (sqlParser.K_USE - 64)) | (1 << (sqlParser.K_VALUES - 64)) | (1 << (sqlParser.K_WHERE - 64)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)




    def name(self):

        localctx = sqlParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 961
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Function_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)




    def function_name(self):

        localctx = sqlParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDatabase_name" ):
                listener.enterDatabase_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDatabase_name" ):
                listener.exitDatabase_name(self)




    def database_name(self):

        localctx = sqlParser.Database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 965
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)




    def table_name(self):

        localctx = sqlParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 967
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_or_index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)




    def table_or_index_name(self):

        localctx = sqlParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_table_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)




    def new_table_name(self):

        localctx = sqlParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class New_database_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_new_database_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_database_name" ):
                listener.enterNew_database_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_database_name" ):
                listener.exitNew_database_name(self)




    def new_database_name(self):

        localctx = sqlParser.New_database_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_new_database_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 973
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Column_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)




    def column_name(self):

        localctx = sqlParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 975
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Collation_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)




    def collation_name(self):

        localctx = sqlParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Foreign_tableContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)




    def foreign_table(self):

        localctx = sqlParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Index_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)




    def index_name(self):

        localctx = sqlParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Trigger_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)




    def trigger_name(self):

        localctx = sqlParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class View_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)




    def view_name(self):

        localctx = sqlParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 985
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Module_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)




    def module_name(self):

        localctx = sqlParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Table_aliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)




    def table_alias(self):

        localctx = sqlParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Transaction_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)




    def transaction_name(self):

        localctx = sqlParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 991
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_nameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(sqlParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(sqlParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(sqlParser.STRING_LITERAL, 0)

        def any_name(self):
            return self.getTypedRuleContext(sqlParser.Any_nameContext,0)


        def getRuleIndex(self):
            return sqlParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)




    def any_name(self):

        localctx = sqlParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_any_name)
        try:
            self.state = 1000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [sqlParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.match(sqlParser.IDENTIFIER)
                pass
            elif token in [sqlParser.K_ADD, sqlParser.K_ALTER, sqlParser.K_AND, sqlParser.K_AS, sqlParser.K_ASC, sqlParser.K_BEGIN, sqlParser.K_BY, sqlParser.K_CHECK, sqlParser.K_COLUMN, sqlParser.K_COMMIT, sqlParser.K_CONSTRAINT, sqlParser.K_CREATE, sqlParser.K_DATABASE, sqlParser.K_DATABASES, sqlParser.K_DEFAULT, sqlParser.K_DELETE, sqlParser.K_DESC, sqlParser.K_DISTINCT, sqlParser.K_DROP, sqlParser.K_EXCEPT, sqlParser.K_EXISTS, sqlParser.K_FOR, sqlParser.K_FOREIGN, sqlParser.K_FROM, sqlParser.K_FULL, sqlParser.K_GROUP, sqlParser.K_HAVING, sqlParser.K_IGNORE, sqlParser.K_IN, sqlParser.K_INDEX, sqlParser.K_INNER, sqlParser.K_INSERT, sqlParser.K_INTERSECT, sqlParser.K_INTO, sqlParser.K_IS, sqlParser.K_JOIN, sqlParser.K_KEY, sqlParser.K_LEFT, sqlParser.K_LIKE, sqlParser.K_LIMIT, sqlParser.K_NOT, sqlParser.K_NULL, sqlParser.K_OF, sqlParser.K_OFFSET, sqlParser.K_ON, sqlParser.K_OR, sqlParser.K_ORDER, sqlParser.K_PRIMARY, sqlParser.K_REFERENCES, sqlParser.K_RENAME, sqlParser.K_ROLLBACK, sqlParser.K_SELECT, sqlParser.K_SET, sqlParser.K_SHOW, sqlParser.K_TABLE, sqlParser.K_TABLES, sqlParser.K_THEN, sqlParser.K_TO, sqlParser.K_TRANSACTION, sqlParser.K_UNION, sqlParser.K_UNIQUE, sqlParser.K_UPDATE, sqlParser.K_USE, sqlParser.K_VALUES, sqlParser.K_WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.keyword()
                pass
            elif token in [sqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 995
                self.match(sqlParser.STRING_LITERAL)
                pass
            elif token in [sqlParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 996
                self.match(sqlParser.OPEN_PAR)
                self.state = 997
                self.any_name()
                self.state = 998
                self.match(sqlParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[30] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         




